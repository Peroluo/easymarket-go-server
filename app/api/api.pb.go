// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	api "easymarket-go-server/common/goods/api"
	api1 "easymarket-go-server/common/topic/api"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GoodsSellRes struct {
	// 商品规格
	GoodsSize []*api.GoodsSize `protobuf:"bytes,1,rep,name=goodsSize,proto3" json:"goodsSize" form:"goodsSize"`
	// 商品轮播图
	GoodsGallery []*api.GoodsGallery `protobuf:"bytes,2,rep,name=goodsGallery,proto3" json:"goodsGallery" form:"goodsGallery"`
	// 商品特点
	Attribute []*api.Attribute `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute" form:"attribute"`
	// 商品疑问列表
	Issue []*api.GoodsIssue `protobuf:"bytes,4,rep,name=issue,proto3" json:"issue" form:"issue"`
	// 产品列表
	ProductList []*api.Product `protobuf:"bytes,5,rep,name=productList,proto3" json:"productList" form:"productList"`
}

func (m *GoodsSellRes) Reset()         { *m = GoodsSellRes{} }
func (m *GoodsSellRes) String() string { return proto.CompactTextString(m) }
func (*GoodsSellRes) ProtoMessage()    {}
func (*GoodsSellRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *GoodsSellRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsSellRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsSellRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsSellRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsSellRes.Merge(m, src)
}
func (m *GoodsSellRes) XXX_Size() int {
	return m.Size()
}
func (m *GoodsSellRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsSellRes.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsSellRes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GoodsSellRes)(nil), "app.service.v1.GoodsSellRes")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0x4d, 0x9a, 0xaf, 0x9f, 0x5a, 0x37, 0xb4, 0xb0, 0x80, 0x48, 0xd3, 0x62, 0x37, 0x96, 0x10,
	0x5c, 0x6a, 0x8b, 0x72, 0xe3, 0xd6, 0x14, 0x29, 0x42, 0x02, 0x09, 0xb9, 0x88, 0x03, 0xe2, 0xb2,
	0x76, 0xb6, 0xee, 0x52, 0x3b, 0xbb, 0xd8, 0x9b, 0x4a, 0xe1, 0xc8, 0x2f, 0x40, 0xe2, 0xc6, 0x2f,
	0xea, 0xb1, 0x12, 0x17, 0x4e, 0x16, 0xb4, 0x9c, 0x72, 0xcc, 0x2f, 0x40, 0x3b, 0x6b, 0xc7, 0x4e,
	0xd3, 0x0d, 0xbd, 0x65, 0xe7, 0xbd, 0x79, 0x6f, 0xde, 0xc4, 0x6b, 0x1b, 0xab, 0x98, 0x53, 0x87,
	0x27, 0x4c, 0x30, 0xb4, 0x8e, 0x39, 0x77, 0x52, 0x92, 0x9c, 0xd2, 0x80, 0x38, 0xa7, 0x4f, 0xdb,
	0xbb, 0x21, 0x15, 0xc7, 0x43, 0xdf, 0x09, 0x58, 0xec, 0x86, 0x2c, 0x64, 0x2e, 0xd0, 0xfc, 0xe1,
	0x11, 0x9c, 0xe0, 0x00, 0xbf, 0x54, 0x7b, 0x7b, 0x2b, 0x64, 0x2c, 0x8c, 0x48, 0xc9, 0x22, 0x31,
	0x17, 0xa3, 0x1c, 0xdc, 0xce, 0x41, 0xcc, 0xa9, 0x8b, 0x07, 0x03, 0x26, 0xb0, 0xa0, 0x6c, 0x90,
	0xe6, 0xa8, 0x4b, 0x70, 0x3a, 0x8a, 0x71, 0x72, 0x42, 0xc4, 0x6e, 0xc8, 0x76, 0xe5, 0x0c, 0x24,
	0x71, 0x03, 0x16, 0xc7, 0x6c, 0xe0, 0x86, 0x8c, 0xf5, 0x53, 0xd5, 0x58, 0x8c, 0xba, 0xb8, 0x41,
	0x30, 0x4e, 0x83, 0xd9, 0x06, 0x7b, 0xdc, 0x30, 0x9a, 0x3d, 0x29, 0x74, 0x48, 0xa2, 0xc8, 0x23,
	0x29, 0xfa, 0x60, 0xac, 0x82, 0xf0, 0x21, 0xfd, 0x4c, 0x5a, 0xf5, 0x9d, 0xc6, 0x93, 0xb5, 0xbd,
	0x2d, 0x07, 0x2a, 0x95, 0x15, 0x38, 0xbd, 0x82, 0xd2, 0xed, 0x8c, 0x33, 0xab, 0xec, 0x98, 0x64,
	0xd6, 0xed, 0x23, 0x96, 0xc4, 0xcf, 0xed, 0x69, 0xc9, 0xf6, 0x4a, 0x18, 0x9d, 0x18, 0x4d, 0x38,
	0xf4, 0x70, 0x14, 0x91, 0x64, 0xd4, 0x5a, 0x02, 0x03, 0x53, 0x63, 0x90, 0xb3, 0xba, 0x8f, 0xc7,
	0x99, 0x35, 0xd3, 0x37, 0xc9, 0xac, 0xbb, 0x15, 0x9b, 0xbc, 0x6a, 0x7b, 0x33, 0x24, 0x19, 0x05,
	0x0b, 0x91, 0x50, 0x7f, 0x28, 0x48, 0xab, 0xa1, 0x8b, 0xb2, 0x5f, 0x50, 0x54, 0x94, 0x69, 0x47,
	0x19, 0x65, 0x5a, 0xb2, 0xbd, 0x12, 0x46, 0xaf, 0x8d, 0x65, 0x9a, 0xa6, 0x43, 0xd2, 0xfa, 0x0f,
	0x94, 0xb7, 0x35, 0x19, 0x5e, 0x4a, 0x4e, 0x77, 0x73, 0x9c, 0x59, 0x8a, 0x3e, 0xc9, 0xac, 0xa6,
	0x92, 0x85, 0xa3, 0xed, 0xa9, 0x32, 0xf2, 0x8d, 0x35, 0x9e, 0xb0, 0xfe, 0x30, 0x10, 0xaf, 0x68,
	0x2a, 0x5a, 0xcb, 0x20, 0xba, 0x39, 0x2f, 0xfa, 0x46, 0x91, 0xba, 0x8f, 0xc6, 0x99, 0x55, 0xed,
	0x98, 0x64, 0x16, 0x52, 0xba, 0x95, 0xa2, 0xed, 0x55, 0x29, 0x7b, 0xdf, 0x57, 0x8c, 0xc6, 0x3e,
	0xe7, 0x28, 0x30, 0x9a, 0x3d, 0x22, 0x60, 0x3c, 0x59, 0x47, 0x6d, 0xcd, 0xec, 0x1e, 0xf9, 0xd4,
	0xd6, 0xfd, 0x37, 0xb2, 0xd1, 0x23, 0xa9, 0xfd, 0xe0, 0xcb, 0x8f, 0x3f, 0xdf, 0x96, 0xee, 0xa0,
	0x0d, 0x17, 0x73, 0x9e, 0x3f, 0x93, 0x91, 0x14, 0xf5, 0x8d, 0xf5, 0xc2, 0xe4, 0x05, 0x11, 0x98,
	0x46, 0x68, 0x47, 0x23, 0xa5, 0x60, 0x69, 0xa6, 0x1f, 0x24, 0xb5, 0x11, 0x18, 0x35, 0x91, 0x51,
	0x1a, 0xa1, 0x8f, 0xe0, 0xd1, 0x4d, 0xf0, 0xa0, 0x9f, 0x7b, 0x74, 0xe6, 0x15, 0x00, 0xae, 0x98,
	0xfc, 0x93, 0x72, 0xd5, 0xcb, 0x97, 0x28, 0x3a, 0x86, 0xa5, 0x01, 0x13, 0x96, 0x66, 0xe9, 0x64,
	0xd4, 0x66, 0xae, 0xdd, 0xdc, 0xb4, 0x7b, 0x7e, 0x73, 0x60, 0xa2, 0x36, 0xf7, 0xce, 0x58, 0xe9,
	0x11, 0xf1, 0x56, 0xde, 0x56, 0xd4, 0x76, 0xe0, 0xd6, 0x56, 0x45, 0x00, 0x50, 0xdb, 0xd2, 0x61,
	0x57, 0x13, 0x00, 0x0f, 0x85, 0x90, 0x00, 0x28, 0x90, 0xc0, 0xd4, 0xf4, 0x97, 0x01, 0x16, 0xe1,
	0x57, 0x03, 0xa8, 0xb7, 0x0b, 0x04, 0xe0, 0xc6, 0x46, 0x61, 0xe4, 0x91, 0x08, 0x0b, 0xd2, 0x47,
	0x1d, 0xed, 0xac, 0x80, 0xdf, 0xc4, 0xae, 0x0d, 0x76, 0xf7, 0x10, 0xaa, 0xd8, 0x25, 0xb9, 0xbc,
	0x00, 0xc7, 0x03, 0x2c, 0x48, 0xc8, 0x92, 0x11, 0xa4, 0xb3, 0xe7, 0xd7, 0x5f, 0xe0, 0x07, 0xc7,
	0x34, 0xea, 0x6b, 0x1e, 0x05, 0xc9, 0xe9, 0xe5, 0x1a, 0xf3, 0xae, 0x41, 0xae, 0x50, 0x3c, 0xe2,
	0x6b, 0x15, 0x57, 0xf4, 0x50, 0xef, 0x28, 0xcd, 0x16, 0xc2, 0xa9, 0x7d, 0x1f, 0x8c, 0x36, 0xd0,
	0xad, 0x19, 0xa3, 0xfc, 0x4f, 0x9b, 0xbe, 0xa2, 0x6f, 0x70, 0x89, 0xb6, 0x9d, 0xd9, 0xef, 0x95,
	0x53, 0x7d, 0xbf, 0x5f, 0x7b, 0x5f, 0x53, 0x12, 0x45, 0xdd, 0xce, 0xd9, 0x6f, 0xb3, 0x76, 0x76,
	0x61, 0xd6, 0xcf, 0x2f, 0xcc, 0xfa, 0xaf, 0x0b, 0xb3, 0xfe, 0xf5, 0xd2, 0xac, 0x9d, 0x5f, 0x9a,
	0xb5, 0x9f, 0x97, 0x66, 0xed, 0x7d, 0x03, 0x73, 0xea, 0xff, 0x0f, 0xdf, 0x8c, 0x67, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x78, 0xb4, 0xcb, 0xf5, 0x1c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppClient interface {
	// 获取商品列表
	GetGoodsList(ctx context.Context, in *api.GoodsReq, opts ...grpc.CallOption) (*api.GoodsListRes, error)
	// 获取商品详情
	GetGoodsDetail(ctx context.Context, in *api.GoodsDetailReq, opts ...grpc.CallOption) (*api.GoodsRes, error)
	// 获取制造商详情
	GetBrandDetail(ctx context.Context, in *api.BrandsDetailReq, opts ...grpc.CallOption) (*api.BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(ctx context.Context, in *api.BrandsListReq, opts ...grpc.CallOption) (*api.BrandListRes, error)
	// 获取专题详情
	GetTopic(ctx context.Context, in *api1.TopicReq, opts ...grpc.CallOption) (*api1.TopicRes, error)
	// 获取专题列表
	GetTopicList(ctx context.Context, in *api1.TopicListReq, opts ...grpc.CallOption) (*api1.TopicListRes, error)
	// 获取相似专题列表
	GetTopicRelated(ctx context.Context, in *api1.TopicRelatedReq, opts ...grpc.CallOption) (*api1.TopicListRes, error)
	// 获取子商品分类列表
	GetCategoryList(ctx context.Context, in *api.CategoryChildReq, opts ...grpc.CallOption) (*api.CateGoryListRes, error)
	// 获取商品分类详情
	GetCategory(ctx context.Context, in *api.CategoryReq, opts ...grpc.CallOption) (*api.CategoryRes, error)
	// 获取商品售卖信息
	GetGoodsSell(ctx context.Context, in *api.GoodsDetailReq, opts ...grpc.CallOption) (*GoodsSellRes, error)
}

type appClient struct {
	cc *grpc.ClientConn
}

func NewAppClient(cc *grpc.ClientConn) AppClient {
	return &appClient{cc}
}

func (c *appClient) GetGoodsList(ctx context.Context, in *api.GoodsReq, opts ...grpc.CallOption) (*api.GoodsListRes, error) {
	out := new(api.GoodsListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetGoodsDetail(ctx context.Context, in *api.GoodsDetailReq, opts ...grpc.CallOption) (*api.GoodsRes, error) {
	out := new(api.GoodsRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetBrandDetail(ctx context.Context, in *api.BrandsDetailReq, opts ...grpc.CallOption) (*api.BrandsDetailRes, error) {
	out := new(api.BrandsDetailRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetBrandDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetBrandList(ctx context.Context, in *api.BrandsListReq, opts ...grpc.CallOption) (*api.BrandListRes, error) {
	out := new(api.BrandListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTopic(ctx context.Context, in *api1.TopicReq, opts ...grpc.CallOption) (*api1.TopicRes, error) {
	out := new(api1.TopicRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTopicList(ctx context.Context, in *api1.TopicListReq, opts ...grpc.CallOption) (*api1.TopicListRes, error) {
	out := new(api1.TopicListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetTopicList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTopicRelated(ctx context.Context, in *api1.TopicRelatedReq, opts ...grpc.CallOption) (*api1.TopicListRes, error) {
	out := new(api1.TopicListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetTopicRelated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetCategoryList(ctx context.Context, in *api.CategoryChildReq, opts ...grpc.CallOption) (*api.CateGoryListRes, error) {
	out := new(api.CateGoryListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetCategory(ctx context.Context, in *api.CategoryReq, opts ...grpc.CallOption) (*api.CategoryRes, error) {
	out := new(api.CategoryRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetGoodsSell(ctx context.Context, in *api.GoodsDetailReq, opts ...grpc.CallOption) (*GoodsSellRes, error) {
	out := new(GoodsSellRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetGoodsSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
type AppServer interface {
	// 获取商品列表
	GetGoodsList(context.Context, *api.GoodsReq) (*api.GoodsListRes, error)
	// 获取商品详情
	GetGoodsDetail(context.Context, *api.GoodsDetailReq) (*api.GoodsRes, error)
	// 获取制造商详情
	GetBrandDetail(context.Context, *api.BrandsDetailReq) (*api.BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(context.Context, *api.BrandsListReq) (*api.BrandListRes, error)
	// 获取专题详情
	GetTopic(context.Context, *api1.TopicReq) (*api1.TopicRes, error)
	// 获取专题列表
	GetTopicList(context.Context, *api1.TopicListReq) (*api1.TopicListRes, error)
	// 获取相似专题列表
	GetTopicRelated(context.Context, *api1.TopicRelatedReq) (*api1.TopicListRes, error)
	// 获取子商品分类列表
	GetCategoryList(context.Context, *api.CategoryChildReq) (*api.CateGoryListRes, error)
	// 获取商品分类详情
	GetCategory(context.Context, *api.CategoryReq) (*api.CategoryRes, error)
	// 获取商品售卖信息
	GetGoodsSell(context.Context, *api.GoodsDetailReq) (*GoodsSellRes, error)
}

// UnimplementedAppServer can be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (*UnimplementedAppServer) GetGoodsList(ctx context.Context, req *api.GoodsReq) (*api.GoodsListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (*UnimplementedAppServer) GetGoodsDetail(ctx context.Context, req *api.GoodsDetailReq) (*api.GoodsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (*UnimplementedAppServer) GetBrandDetail(ctx context.Context, req *api.BrandsDetailReq) (*api.BrandsDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandDetail not implemented")
}
func (*UnimplementedAppServer) GetBrandList(ctx context.Context, req *api.BrandsListReq) (*api.BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (*UnimplementedAppServer) GetTopic(ctx context.Context, req *api1.TopicReq) (*api1.TopicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (*UnimplementedAppServer) GetTopicList(ctx context.Context, req *api1.TopicListReq) (*api1.TopicListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicList not implemented")
}
func (*UnimplementedAppServer) GetTopicRelated(ctx context.Context, req *api1.TopicRelatedReq) (*api1.TopicListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicRelated not implemented")
}
func (*UnimplementedAppServer) GetCategoryList(ctx context.Context, req *api.CategoryChildReq) (*api.CateGoryListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (*UnimplementedAppServer) GetCategory(ctx context.Context, req *api.CategoryReq) (*api.CategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (*UnimplementedAppServer) GetGoodsSell(ctx context.Context, req *api.GoodsDetailReq) (*GoodsSellRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsSell not implemented")
}

func RegisterAppServer(s *grpc.Server, srv AppServer) {
	s.RegisterService(&_App_serviceDesc, srv)
}

func _App_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetGoodsList(ctx, req.(*api.GoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetGoodsDetail(ctx, req.(*api.GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.BrandsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetBrandDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetBrandDetail(ctx, req.(*api.BrandsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.BrandsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetBrandList(ctx, req.(*api.BrandsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.TopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTopic(ctx, req.(*api1.TopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTopicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.TopicListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTopicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetTopicList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTopicList(ctx, req.(*api1.TopicListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTopicRelated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.TopicRelatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTopicRelated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetTopicRelated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTopicRelated(ctx, req.(*api1.TopicRelatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CategoryChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetCategoryList(ctx, req.(*api.CategoryChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.CategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetCategory(ctx, req.(*api.CategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetGoodsSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetGoodsSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetGoodsSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetGoodsSell(ctx, req.(*api.GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _App_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.service.v1.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsList",
			Handler:    _App_GetGoodsList_Handler,
		},
		{
			MethodName: "GetGoodsDetail",
			Handler:    _App_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetBrandDetail",
			Handler:    _App_GetBrandDetail_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _App_GetBrandList_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _App_GetTopic_Handler,
		},
		{
			MethodName: "GetTopicList",
			Handler:    _App_GetTopicList_Handler,
		},
		{
			MethodName: "GetTopicRelated",
			Handler:    _App_GetTopicRelated_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _App_GetCategoryList_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _App_GetCategory_Handler,
		},
		{
			MethodName: "GetGoodsSell",
			Handler:    _App_GetGoodsSell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *GoodsSellRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsSellRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsSellRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for iNdEx := len(m.ProductList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Issue) > 0 {
		for iNdEx := len(m.Issue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Attribute) > 0 {
		for iNdEx := len(m.Attribute) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attribute[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GoodsGallery) > 0 {
		for iNdEx := len(m.GoodsGallery) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsGallery[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GoodsSize) > 0 {
		for iNdEx := len(m.GoodsSize) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsSize[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoodsSellRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GoodsSize) > 0 {
		for _, e := range m.GoodsSize {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.GoodsGallery) > 0 {
		for _, e := range m.GoodsGallery {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Attribute) > 0 {
		for _, e := range m.Attribute {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Issue) > 0 {
		for _, e := range m.Issue {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoodsSellRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsSellRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsSellRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsSize = append(m.GoodsSize, &api.GoodsSize{})
			if err := m.GoodsSize[len(m.GoodsSize)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsGallery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsGallery = append(m.GoodsGallery, &api.GoodsGallery{})
			if err := m.GoodsGallery[len(m.GoodsGallery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute = append(m.Attribute, &api.Attribute{})
			if err := m.Attribute[len(m.Attribute)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issue = append(m.Issue, &api.GoodsIssue{})
			if err := m.Issue[len(m.Issue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &api.Product{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)

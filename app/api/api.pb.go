// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	api "easymarket-go-server/common/goods/api"
	api1 "easymarket-go-server/common/topic/api"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x85, 0x47, 0xde, 0xcb, 0xb3, 0x21, 0x10, 0x27, 0x26, 0xc6, 0x6a, 0xaa, 0xb0, 0xa7, 0x8d,
	0xfa, 0x05, 0x12, 0x13, 0x36, 0xae, 0x88, 0x71, 0xe1, 0x6e, 0x5a, 0xae, 0xc3, 0x68, 0xdb, 0x3b,
	0xb6, 0x03, 0x09, 0x5b, 0x7f, 0xc1, 0x8d, 0x9f, 0xc4, 0xd2, 0xc4, 0x85, 0x5b, 0x45, 0x3f, 0xc4,
	0xf4, 0x4e, 0x91, 0x0a, 0x16, 0xdd, 0xcd, 0xe4, 0xdc, 0x73, 0xce, 0x3d, 0x67, 0xc6, 0xda, 0xe0,
	0x4a, 0xba, 0x2a, 0x41, 0x8d, 0xac, 0xc1, 0x95, 0x72, 0x53, 0x48, 0xc6, 0x32, 0x00, 0x77, 0x7c,
	0x68, 0x77, 0x84, 0xd4, 0xc3, 0x91, 0xef, 0x06, 0x18, 0x79, 0x02, 0x05, 0x7a, 0x34, 0xe6, 0x8f,
	0xae, 0xe8, 0x46, 0x17, 0x3a, 0x19, 0xba, 0xbd, 0x2b, 0x10, 0x45, 0x08, 0x8b, 0x29, 0x88, 0x94,
	0x9e, 0xe4, 0xe0, 0x5e, 0x0e, 0x72, 0x25, 0x3d, 0x1e, 0xc7, 0xa8, 0xb9, 0x96, 0x18, 0xa7, 0x39,
	0xea, 0x01, 0x4f, 0x27, 0x11, 0x4f, 0x6e, 0x40, 0x77, 0x04, 0x76, 0xb2, 0x1d, 0x20, 0xf1, 0x02,
	0x8c, 0x22, 0x8c, 0x3d, 0x81, 0x38, 0x48, 0x0d, 0x71, 0xbe, 0xea, 0x7a, 0x82, 0x46, 0x25, 0x83,
	0xaf, 0x84, 0xa3, 0xe7, 0xbf, 0x56, 0xed, 0x44, 0x29, 0x16, 0x58, 0xf5, 0x1e, 0xe8, 0x5e, 0x26,
	0x79, 0x26, 0x53, 0xcd, 0x6c, 0x97, 0xe4, 0x0b, 0xb1, 0x5d, 0x02, 0xfb, 0x70, 0x6b, 0x3b, 0x25,
	0x58, 0x46, 0xec, 0x43, 0xda, 0xde, 0xbe, 0x7b, 0x7a, 0xbf, 0xff, 0xb3, 0xc9, 0x9a, 0x1e, 0x57,
	0x2a, 0x5f, 0x33, 0xcc, 0x44, 0x7d, 0xab, 0x31, 0x37, 0x39, 0x05, 0xcd, 0x65, 0xc8, 0x0e, 0x4a,
	0xa4, 0x0c, 0x9c, 0x99, 0x95, 0x2f, 0x92, 0xb6, 0x19, 0x19, 0xd5, 0x99, 0xb5, 0x30, 0x62, 0xd7,
	0xe4, 0xd1, 0x4d, 0x78, 0x3c, 0xc8, 0x3d, 0x5a, 0xab, 0x0a, 0x04, 0x17, 0x4c, 0x7e, 0x1c, 0x59,
	0xf6, 0xf2, 0x33, 0x94, 0x0d, 0xa9, 0x34, 0x9a, 0xa4, 0xd2, 0xf6, 0xcb, 0x64, 0x4c, 0x33, 0xdf,
	0x36, 0xf7, 0xc9, 0x5e, 0x6d, 0x8e, 0x4c, 0x4c, 0x73, 0x17, 0xd6, 0xff, 0x1e, 0xe8, 0xf3, 0xec,
	0x01, 0x99, 0xed, 0xd2, 0x43, 0x16, 0x45, 0x08, 0x30, 0x6d, 0x95, 0x61, 0xcb, 0x09, 0x68, 0x8e,
	0x09, 0x4a, 0x40, 0x23, 0x94, 0xc0, 0x29, 0xe1, 0x2f, 0x02, 0xac, 0xc3, 0x97, 0x03, 0x98, 0x0f,
	0x47, 0x01, 0x94, 0xd5, 0x9c, 0x1b, 0xf5, 0x21, 0xe4, 0x1a, 0x06, 0xac, 0x55, 0xba, 0x2b, 0xe1,
	0xbf, 0xb1, 0xb3, 0xc9, 0x6e, 0x8b, 0xb1, 0x82, 0x5d, 0x62, 0xe8, 0xdd, 0x9d, 0xe9, 0xab, 0x53,
	0x99, 0xce, 0x9c, 0xea, 0xe3, 0xcc, 0xa9, 0xbe, 0xcc, 0x9c, 0xea, 0xc3, 0x9b, 0x53, 0xb9, 0xac,
	0x71, 0x25, 0xfd, 0x7f, 0xf4, 0xf7, 0x8f, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x3f, 0x7f,
	0x04, 0xe4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppClient is the client API for App service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppClient interface {
	// 获取商品列表
	GetGoodsList(ctx context.Context, in *api.GoodsReq, opts ...grpc.CallOption) (*api.GoodsListRes, error)
	// 获取商品详情
	GetGoodsDetail(ctx context.Context, in *api.GoodsDetailReq, opts ...grpc.CallOption) (*api.GoodsRes, error)
	// 获取制造商详情
	GetBrandDetail(ctx context.Context, in *api.BrandsDetailReq, opts ...grpc.CallOption) (*api.BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(ctx context.Context, in *api.BrandsListReq, opts ...grpc.CallOption) (*api.BrandListRes, error)
	// 获取专题列表
	GetTopic(ctx context.Context, in *api1.TopicReq, opts ...grpc.CallOption) (*api1.TopicRes, error)
	// 获取专题列表
	GetTopicList(ctx context.Context, in *api1.TopicListReq, opts ...grpc.CallOption) (*api1.TopicListRes, error)
	// 获取相似专题列表
	GetTopicRelated(ctx context.Context, in *api1.TopicRelatedReq, opts ...grpc.CallOption) (*api1.TopicListRes, error)
}

type appClient struct {
	cc *grpc.ClientConn
}

func NewAppClient(cc *grpc.ClientConn) AppClient {
	return &appClient{cc}
}

func (c *appClient) GetGoodsList(ctx context.Context, in *api.GoodsReq, opts ...grpc.CallOption) (*api.GoodsListRes, error) {
	out := new(api.GoodsListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetGoodsDetail(ctx context.Context, in *api.GoodsDetailReq, opts ...grpc.CallOption) (*api.GoodsRes, error) {
	out := new(api.GoodsRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetBrandDetail(ctx context.Context, in *api.BrandsDetailReq, opts ...grpc.CallOption) (*api.BrandsDetailRes, error) {
	out := new(api.BrandsDetailRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetBrandDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetBrandList(ctx context.Context, in *api.BrandsListReq, opts ...grpc.CallOption) (*api.BrandListRes, error) {
	out := new(api.BrandListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTopic(ctx context.Context, in *api1.TopicReq, opts ...grpc.CallOption) (*api1.TopicRes, error) {
	out := new(api1.TopicRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTopicList(ctx context.Context, in *api1.TopicListReq, opts ...grpc.CallOption) (*api1.TopicListRes, error) {
	out := new(api1.TopicListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetTopicList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appClient) GetTopicRelated(ctx context.Context, in *api1.TopicRelatedReq, opts ...grpc.CallOption) (*api1.TopicListRes, error) {
	out := new(api1.TopicListRes)
	err := c.cc.Invoke(ctx, "/app.service.v1.App/GetTopicRelated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServer is the server API for App service.
type AppServer interface {
	// 获取商品列表
	GetGoodsList(context.Context, *api.GoodsReq) (*api.GoodsListRes, error)
	// 获取商品详情
	GetGoodsDetail(context.Context, *api.GoodsDetailReq) (*api.GoodsRes, error)
	// 获取制造商详情
	GetBrandDetail(context.Context, *api.BrandsDetailReq) (*api.BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(context.Context, *api.BrandsListReq) (*api.BrandListRes, error)
	// 获取专题列表
	GetTopic(context.Context, *api1.TopicReq) (*api1.TopicRes, error)
	// 获取专题列表
	GetTopicList(context.Context, *api1.TopicListReq) (*api1.TopicListRes, error)
	// 获取相似专题列表
	GetTopicRelated(context.Context, *api1.TopicRelatedReq) (*api1.TopicListRes, error)
}

// UnimplementedAppServer can be embedded to have forward compatible implementations.
type UnimplementedAppServer struct {
}

func (*UnimplementedAppServer) GetGoodsList(ctx context.Context, req *api.GoodsReq) (*api.GoodsListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (*UnimplementedAppServer) GetGoodsDetail(ctx context.Context, req *api.GoodsDetailReq) (*api.GoodsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (*UnimplementedAppServer) GetBrandDetail(ctx context.Context, req *api.BrandsDetailReq) (*api.BrandsDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandDetail not implemented")
}
func (*UnimplementedAppServer) GetBrandList(ctx context.Context, req *api.BrandsListReq) (*api.BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (*UnimplementedAppServer) GetTopic(ctx context.Context, req *api1.TopicReq) (*api1.TopicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (*UnimplementedAppServer) GetTopicList(ctx context.Context, req *api1.TopicListReq) (*api1.TopicListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicList not implemented")
}
func (*UnimplementedAppServer) GetTopicRelated(ctx context.Context, req *api1.TopicRelatedReq) (*api1.TopicListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicRelated not implemented")
}

func RegisterAppServer(s *grpc.Server, srv AppServer) {
	s.RegisterService(&_App_serviceDesc, srv)
}

func _App_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetGoodsList(ctx, req.(*api.GoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetGoodsDetail(ctx, req.(*api.GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.BrandsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetBrandDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetBrandDetail(ctx, req.(*api.BrandsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.BrandsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetBrandList(ctx, req.(*api.BrandsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.TopicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTopic(ctx, req.(*api1.TopicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTopicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.TopicListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTopicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetTopicList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTopicList(ctx, req.(*api1.TopicListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _App_GetTopicRelated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.TopicRelatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServer).GetTopicRelated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.service.v1.App/GetTopicRelated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServer).GetTopicRelated(ctx, req.(*api1.TopicRelatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _App_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.service.v1.App",
	HandlerType: (*AppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsList",
			Handler:    _App_GetGoodsList_Handler,
		},
		{
			MethodName: "GetGoodsDetail",
			Handler:    _App_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetBrandDetail",
			Handler:    _App_GetBrandDetail_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _App_GetBrandList_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _App_GetTopic_Handler,
		},
		{
			MethodName: "GetTopicList",
			Handler:    _App_GetTopicList_Handler,
		},
		{
			MethodName: "GetTopicRelated",
			Handler:    _App_GetTopicRelated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

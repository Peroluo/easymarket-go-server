// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathWeChatGetWeChatOpenID = "/weChat/getOpenId"
var PathWeChatLogin = "/weChat/login"

// WeChatBMServer is the server API for WeChat service.
type WeChatBMServer interface {
	// 获取微信OpenId
	GetWeChatOpenID(ctx context.Context, req *CodeReq) (resp *OpenIdRes, err error)

	// 微信小程序登录
	Login(ctx context.Context, req *LoginReq) (resp *LoginRes, err error)
}

var WeChatSvc WeChatBMServer

func weChatGetWeChatOpenID(c *bm.Context) {
	p := new(CodeReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WeChatSvc.GetWeChatOpenID(c, p)
	c.JSON(resp, err)
}

func weChatLogin(c *bm.Context) {
	p := new(LoginReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := WeChatSvc.Login(c, p)
	c.JSON(resp, err)
}

// RegisterWeChatBMServer Register the blademaster route
func RegisterWeChatBMServer(e *bm.Engine, server WeChatBMServer) {
	WeChatSvc = server
	e.POST("/weChat/getOpenId", weChatGetWeChatOpenID)
	e.POST("/weChat/login", weChatLogin)
}

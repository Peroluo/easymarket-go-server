// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 登录请求参数
type LoginReq struct {
	// 用户微信名
	NickName string `protobuf:"bytes,1,opt,name=NickName,proto3" json:"nickname" form:"nickname" validate:"required" gorm:"column:nickname"`
	// OpenID
	OpenID               string   `protobuf:"bytes,2,opt,name=OpenID,proto3" json:"openId" form:"openId" validate:"required" gorm:"column:openId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

// 登录响应
type LoginRes struct {
	// 用户ID
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"id" form:"id" gorm:"column:id"`
	// 用户微信名
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"nickname" form:"nickname"  gorm:"column:nickname"`
	// OpenID
	OpenID               string   `protobuf:"bytes,3,opt,name=OpenID,proto3" json:"openId" form:"openId"  gorm:"column:openId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRes) Reset()         { *m = LoginRes{} }
func (m *LoginRes) String() string { return proto.CompactTextString(m) }
func (*LoginRes) ProtoMessage()    {}
func (*LoginRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *LoginRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRes.Merge(m, src)
}
func (m *LoginRes) XXX_Size() int {
	return m.Size()
}
func (m *LoginRes) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRes.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRes proto.InternalMessageInfo

// 获取微信OpenId请求按时
type CodeReq struct {
	// 微信授权Code
	Code                 string   `protobuf:"bytes,1,opt,name=Code,proto3" json:"code" form:"code" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodeReq) Reset()         { *m = CodeReq{} }
func (m *CodeReq) String() string { return proto.CompactTextString(m) }
func (*CodeReq) ProtoMessage()    {}
func (*CodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *CodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeReq.Merge(m, src)
}
func (m *CodeReq) XXX_Size() int {
	return m.Size()
}
func (m *CodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CodeReq proto.InternalMessageInfo

// 获取微信OpenId
type OpenIdRes struct {
	// OpenID
	OpenID               string   `protobuf:"bytes,1,opt,name=OpenID,proto3" json:"openId" form:"openId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenIdRes) Reset()         { *m = OpenIdRes{} }
func (m *OpenIdRes) String() string { return proto.CompactTextString(m) }
func (*OpenIdRes) ProtoMessage()    {}
func (*OpenIdRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *OpenIdRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenIdRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenIdRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenIdRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenIdRes.Merge(m, src)
}
func (m *OpenIdRes) XXX_Size() int {
	return m.Size()
}
func (m *OpenIdRes) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenIdRes.DiscardUnknown(m)
}

var xxx_messageInfo_OpenIdRes proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LoginReq)(nil), "LoginReq")
	proto.RegisterType((*LoginRes)(nil), "LoginRes")
	proto.RegisterType((*CodeReq)(nil), "CodeReq")
	proto.RegisterType((*OpenIdRes)(nil), "OpenIdRes")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xef, 0x6c, 0xdb, 0x98, 0x0c, 0x14, 0x71, 0x0e, 0x12, 0xd3, 0xb2, 0x1b, 0x46, 0x41, 0xa9,
	0xb8, 0x8b, 0x56, 0x2c, 0xec, 0x45, 0x49, 0x23, 0x92, 0x22, 0x15, 0xd6, 0x83, 0x20, 0x5e, 0x26,
	0x3b, 0x93, 0xe9, 0xd0, 0xec, 0xcc, 0x36, 0x99, 0x28, 0x5e, 0x3d, 0x79, 0xf7, 0xe2, 0x47, 0xea,
	0xb1, 0xe0, 0x7d, 0xa9, 0xd1, 0x53, 0x8e, 0xfd, 0x04, 0xb2, 0x33, 0x93, 0xad, 0x1b, 0x44, 0xbd,
	0xcd, 0xfb, 0xf7, 0xfb, 0xf3, 0xde, 0xc0, 0x16, 0xc9, 0x45, 0x98, 0x4f, 0x94, 0x56, 0x9d, 0x07,
	0x5c, 0xe8, 0xe3, 0xd9, 0x30, 0x4c, 0x55, 0x16, 0x71, 0xc5, 0x55, 0x64, 0xd2, 0xc3, 0xd9, 0xc8,
	0x44, 0x26, 0x30, 0x2f, 0xd7, 0xbe, 0xcd, 0x95, 0xe2, 0x63, 0x76, 0xd5, 0xc5, 0xb2, 0x5c, 0x7f,
	0x74, 0xc5, 0x1d, 0x57, 0x24, 0xb9, 0x88, 0x88, 0x94, 0x4a, 0x13, 0x2d, 0x94, 0x9c, 0xda, 0x2a,
	0x3e, 0x07, 0xb0, 0xf9, 0x52, 0x71, 0x21, 0x13, 0x76, 0x8a, 0x46, 0xb0, 0x79, 0x24, 0xd2, 0x93,
	0x23, 0x92, 0xb1, 0x36, 0xe8, 0x82, 0x7b, 0xad, 0xde, 0xe1, 0xa2, 0x08, 0x9a, 0x52, 0xa4, 0x27,
	0x92, 0x64, 0xec, 0xb2, 0x08, 0xe2, 0x91, 0x9a, 0x64, 0x31, 0x5e, 0x66, 0x70, 0xf7, 0x3d, 0x19,
	0x0b, 0x4a, 0x34, 0x8b, 0xf1, 0x84, 0x9d, 0xce, 0xc4, 0x84, 0x51, 0xdc, 0xe5, 0xa6, 0x27, 0x55,
	0xe3, 0x59, 0x26, 0xe3, 0xaa, 0x35, 0xa9, 0xb0, 0xd1, 0x3b, 0xd8, 0x78, 0x95, 0x33, 0x39, 0xe8,
	0xb7, 0x3d, 0xc3, 0xd2, 0x5f, 0x14, 0x41, 0x43, 0x95, 0x19, 0x7a, 0x59, 0x04, 0x4f, 0x2c, 0x87,
	0x8d, 0xff, 0x83, 0xc1, 0x35, 0x26, 0x0e, 0x13, 0x5f, 0x5c, 0x59, 0x9a, 0xa2, 0xc7, 0xd0, 0x1b,
	0xf4, 0x8d, 0x99, 0xcd, 0xde, 0x9d, 0x45, 0x11, 0x78, 0xa2, 0xa4, 0xe8, 0x58, 0x0a, 0xb1, 0x0a,
	0x25, 0x28, 0x4e, 0xbc, 0x41, 0x1f, 0xbd, 0xfe, 0x6d, 0x11, 0x56, 0xe2, 0xfe, 0xca, 0x22, 0xee,
	0xae, 0x2e, 0xe2, 0xdf, 0xae, 0x07, 0x95, 0xeb, 0x75, 0x03, 0xf9, 0xb0, 0xe6, 0xfa, 0x76, 0xdd,
	0xf5, 0xdf, 0x2d, 0x1e, 0xc2, 0x6b, 0x07, 0x8a, 0xb2, 0xf2, 0x66, 0x4f, 0xe1, 0x46, 0xf9, 0x74,
	0xf7, 0xba, 0xbf, 0x28, 0x82, 0x8d, 0x54, 0xd1, 0x52, 0x62, 0x30, 0x72, 0x10, 0xf4, 0xcf, 0x77,
	0x4a, 0xcc, 0x20, 0x7e, 0x06, 0x5b, 0x06, 0x95, 0x96, 0xeb, 0xda, 0xab, 0x34, 0x5a, 0xbc, 0xed,
	0x9a, 0xc6, 0xad, 0x9a, 0xc6, 0xa5, 0x9a, 0x47, 0x9f, 0x01, 0x6c, 0xbc, 0x61, 0x07, 0xc7, 0x44,
	0xa3, 0xe7, 0xf0, 0xfa, 0x0b, 0xa6, 0x6d, 0x60, 0xab, 0xa8, 0x19, 0x3a, 0xa9, 0x1d, 0x18, 0x56,
	0x44, 0x78, 0xe7, 0xd3, 0xb7, 0x9f, 0x5f, 0xbc, 0x9b, 0xf8, 0x46, 0xf4, 0xc1, 0x34, 0x47, 0x9c,
	0xd9, 0x01, 0x1a, 0x83, 0x5d, 0xb4, 0x0f, 0x37, 0xcd, 0x05, 0x51, 0x2b, 0x5c, 0x7e, 0xce, 0x4e,
	0xf5, 0x9c, 0xe2, 0xb6, 0x19, 0x46, 0x78, 0x6b, 0x39, 0x3c, 0x2e, 0x2b, 0x31, 0xd8, 0xed, 0xdd,
	0x3a, 0xfb, 0xee, 0xaf, 0x9d, 0xcd, 0x7d, 0x70, 0x3e, 0xf7, 0xc1, 0xc5, 0xdc, 0x07, 0x5f, 0x7f,
	0xf8, 0x6b, 0x6f, 0xd7, 0x49, 0x2e, 0x86, 0x0d, 0xf3, 0xe1, 0xf7, 0x7e, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x30, 0x68, 0xa6, 0x73, 0x67, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeChatClient is the client API for WeChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeChatClient interface {
	// 获取微信OpenId
	GetWeChatOpenID(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*OpenIdRes, error)
	// 微信小程序登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
}

type weChatClient struct {
	cc *grpc.ClientConn
}

func NewWeChatClient(cc *grpc.ClientConn) WeChatClient {
	return &weChatClient{cc}
}

func (c *weChatClient) GetWeChatOpenID(ctx context.Context, in *CodeReq, opts ...grpc.CallOption) (*OpenIdRes, error) {
	out := new(OpenIdRes)
	err := c.cc.Invoke(ctx, "/WeChat/GetWeChatOpenID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/WeChat/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeChatServer is the server API for WeChat service.
type WeChatServer interface {
	// 获取微信OpenId
	GetWeChatOpenID(context.Context, *CodeReq) (*OpenIdRes, error)
	// 微信小程序登录
	Login(context.Context, *LoginReq) (*LoginRes, error)
}

// UnimplementedWeChatServer can be embedded to have forward compatible implementations.
type UnimplementedWeChatServer struct {
}

func (*UnimplementedWeChatServer) GetWeChatOpenID(ctx context.Context, req *CodeReq) (*OpenIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeChatOpenID not implemented")
}
func (*UnimplementedWeChatServer) Login(ctx context.Context, req *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterWeChatServer(s *grpc.Server, srv WeChatServer) {
	s.RegisterService(&_WeChat_serviceDesc, srv)
}

func _WeChat_GetWeChatOpenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServer).GetWeChatOpenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeChat/GetWeChatOpenID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServer).GetWeChatOpenID(ctx, req.(*CodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WeChat/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WeChat",
	HandlerType: (*WeChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeChatOpenID",
			Handler:    _WeChat_GetWeChatOpenID_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WeChat_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpenID) > 0 {
		i -= len(m.OpenID)
		copy(dAtA[i:], m.OpenID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpenID) > 0 {
		i -= len(m.OpenID)
		copy(dAtA[i:], m.OpenID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenIdRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenIdRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenIdRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OpenID) > 0 {
		i -= len(m.OpenID)
		copy(dAtA[i:], m.OpenID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoginRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenIdRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenIdRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenIdRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenIdRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)

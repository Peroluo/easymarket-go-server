// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathTopicGetTopic = "/topic"
var PathTopicGetTopicList = "/topic/list"
var PathTopicGetTopicRelated = "/topic/related"

// TopicBMServer is the server API for Topic service.
type TopicBMServer interface {
	// 获取专题列表
	GetTopic(ctx context.Context, req *TopicReq) (resp *TopicRes, err error)

	// 获取专题列表
	GetTopicList(ctx context.Context, req *TopicListReq) (resp *TopicListRes, err error)

	// 获取相似专题列表
	GetTopicRelated(ctx context.Context, req *TopicRelatedReq) (resp *TopicListRes, err error)
}

var TopicSvc TopicBMServer

func topicGetTopic(c *bm.Context) {
	p := new(TopicReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TopicSvc.GetTopic(c, p)
	c.JSON(resp, err)
}

func topicGetTopicList(c *bm.Context) {
	p := new(TopicListReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TopicSvc.GetTopicList(c, p)
	c.JSON(resp, err)
}

func topicGetTopicRelated(c *bm.Context) {
	p := new(TopicRelatedReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := TopicSvc.GetTopicRelated(c, p)
	c.JSON(resp, err)
}

// RegisterTopicBMServer Register the blademaster route
func RegisterTopicBMServer(e *bm.Engine, server TopicBMServer) {
	TopicSvc = server
	e.GET("/topic", topicGetTopic)
	e.GET("/topic/list", topicGetTopicList)
	e.GET("/topic/related", topicGetTopicRelated)
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 获取子分类列表Req
type CategoryChildReq struct {
	// 父级分类id
	ParentId int32 `protobuf:"varint,1,opt,name=parentId,proto3" json:"parentId" form:"parentId"`
}

func (m *CategoryChildReq) Reset()         { *m = CategoryChildReq{} }
func (m *CategoryChildReq) String() string { return proto.CompactTextString(m) }
func (*CategoryChildReq) ProtoMessage()    {}
func (*CategoryChildReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CategoryChildReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryChildReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryChildReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryChildReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryChildReq.Merge(m, src)
}
func (m *CategoryChildReq) XXX_Size() int {
	return m.Size()
}
func (m *CategoryChildReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryChildReq.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryChildReq proto.InternalMessageInfo

// 获取分类详情Req
type CategoryReq struct {
	// 分类id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
}

func (m *CategoryReq) Reset()         { *m = CategoryReq{} }
func (m *CategoryReq) String() string { return proto.CompactTextString(m) }
func (*CategoryReq) ProtoMessage()    {}
func (*CategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *CategoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryReq.Merge(m, src)
}
func (m *CategoryReq) XXX_Size() int {
	return m.Size()
}
func (m *CategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryReq proto.InternalMessageInfo

// 商品分类详情Res
type CategoryRes struct {
	// 分类id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 分类名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	// 分类描述
	FrontDesc string `protobuf:"bytes,3,opt,name=front_desc,json=frontDesc,proto3" json:"front_desc" form:"front_desc"`
	// 分类标题
	FrontName string `protobuf:"bytes,4,opt,name=front_name,json=frontName,proto3" json:"front_name" form:"front_name"`
	// 分类父级id
	ParentId int32 `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id" form:"parent_id"`
	// 分类banner图片
	WapBannerUrl string `protobuf:"bytes,6,opt,name=wap_banner_url,json=wapBannerUrl,proto3" json:"wap_banner_url" form:"wap_banner_url"`
	// 分类icon
	IconUrl string `protobuf:"bytes,7,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url" form:"icon_url"`
}

func (m *CategoryRes) Reset()         { *m = CategoryRes{} }
func (m *CategoryRes) String() string { return proto.CompactTextString(m) }
func (*CategoryRes) ProtoMessage()    {}
func (*CategoryRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *CategoryRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryRes.Merge(m, src)
}
func (m *CategoryRes) XXX_Size() int {
	return m.Size()
}
func (m *CategoryRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryRes.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryRes proto.InternalMessageInfo

// 分类列表Res
type CateGoryListRes struct {
	// 分类列表;
	CategoryList []*CategoryRes `protobuf:"bytes,1,rep,name=categoryList,proto3" json:"categoryList" form:"categoryList"`
}

func (m *CateGoryListRes) Reset()         { *m = CateGoryListRes{} }
func (m *CateGoryListRes) String() string { return proto.CompactTextString(m) }
func (*CateGoryListRes) ProtoMessage()    {}
func (*CateGoryListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *CateGoryListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CateGoryListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CateGoryListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CateGoryListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CateGoryListRes.Merge(m, src)
}
func (m *CateGoryListRes) XXX_Size() int {
	return m.Size()
}
func (m *CateGoryListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CateGoryListRes.DiscardUnknown(m)
}

var xxx_messageInfo_CateGoryListRes proto.InternalMessageInfo

// 商品详情Req
type GoodsDetailReq struct {
	// 商品id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
}

func (m *GoodsDetailReq) Reset()         { *m = GoodsDetailReq{} }
func (m *GoodsDetailReq) String() string { return proto.CompactTextString(m) }
func (*GoodsDetailReq) ProtoMessage()    {}
func (*GoodsDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GoodsDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsDetailReq.Merge(m, src)
}
func (m *GoodsDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *GoodsDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsDetailReq proto.InternalMessageInfo

// 商品列表Req
type GoodsReq struct {
	// 是否是热销 1:是、0:否
	IsHot int32 `protobuf:"varint,1,opt,name=isHot,proto3" json:"isHot" form:"isHot"`
	// 是否是新品 1:是、0:否
	IsNew int32 `protobuf:"varint,2,opt,name=isNew,proto3" json:"isNew" form:"isNew"`
	// 页数
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page" form:"page"`
	// 每页数量
	Size_ int32 `protobuf:"varint,4,opt,name=size,proto3" json:"size" form:"size"`
	// 商品分类id
	CategoryId int32 `protobuf:"varint,5,opt,name=categoryId,proto3" json:"categoryId" form:"categoryId"`
}

func (m *GoodsReq) Reset()         { *m = GoodsReq{} }
func (m *GoodsReq) String() string { return proto.CompactTextString(m) }
func (*GoodsReq) ProtoMessage()    {}
func (*GoodsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *GoodsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsReq.Merge(m, src)
}
func (m *GoodsReq) XXX_Size() int {
	return m.Size()
}
func (m *GoodsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsReq proto.InternalMessageInfo

// 商品列表Res
type GoodsListRes struct {
	// 商品列表
	GoodsList []*GoodsRes `protobuf:"bytes,1,rep,name=goodsList,proto3" json:"goodsList" form:"goodsList"`
	// 商品总数
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total" form:"total"`
}

func (m *GoodsListRes) Reset()         { *m = GoodsListRes{} }
func (m *GoodsListRes) String() string { return proto.CompactTextString(m) }
func (*GoodsListRes) ProtoMessage()    {}
func (*GoodsListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *GoodsListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsListRes.Merge(m, src)
}
func (m *GoodsListRes) XXX_Size() int {
	return m.Size()
}
func (m *GoodsListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsListRes.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsListRes proto.InternalMessageInfo

// 商品详情Res
type GoodsRes struct {
	// 商品id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 商品名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	// 零食价格
	RetailPrice float64 `protobuf:"fixed64,3,opt,name=retail_price,json=retailPrice,proto3" json:"retail_price" form:"retail_price"`
	// 商品简介
	GoodsBrief string `protobuf:"bytes,4,opt,name=goods_brief,json=goodsBrief,proto3" json:"goods_brief" form:"goods_brief"`
	// 商品图片
	ListPicUrl string `protobuf:"bytes,5,opt,name=list_pic_url,json=listPicUrl,proto3" json:"list_pic_url" form:"list_pic_url"`
	// 商品富文本
	GoodsDesc string `protobuf:"bytes,6,opt,name=goods_desc,json=goodsDesc,proto3" json:"goods_desc" form:"goods_desc"`
	// 所属制造商
	BrandId int32 `protobuf:"varint,7,opt,name=brand_id,json=brandId,proto3" json:"brand_id" form:"brand_id"`
}

func (m *GoodsRes) Reset()         { *m = GoodsRes{} }
func (m *GoodsRes) String() string { return proto.CompactTextString(m) }
func (*GoodsRes) ProtoMessage()    {}
func (*GoodsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *GoodsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsRes.Merge(m, src)
}
func (m *GoodsRes) XXX_Size() int {
	return m.Size()
}
func (m *GoodsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsRes.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsRes proto.InternalMessageInfo

// 制造商详情Req
type BrandsDetailReq struct {
	// 制造商id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
}

func (m *BrandsDetailReq) Reset()         { *m = BrandsDetailReq{} }
func (m *BrandsDetailReq) String() string { return proto.CompactTextString(m) }
func (*BrandsDetailReq) ProtoMessage()    {}
func (*BrandsDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *BrandsDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandsDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandsDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandsDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandsDetailReq.Merge(m, src)
}
func (m *BrandsDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *BrandsDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandsDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_BrandsDetailReq proto.InternalMessageInfo

// 制造商详情Res
type BrandsDetailRes struct {
	// 制造商id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 制造商名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	// 制造商简介
	SimpleDesc string `protobuf:"bytes,3,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc" form:"simple_desc"`
	// 制造商图片
	PicUrl string `protobuf:"bytes,4,opt,name=pic_url,json=picUrl,proto3" json:"pic_url" form:"pic_url"`
}

func (m *BrandsDetailRes) Reset()         { *m = BrandsDetailRes{} }
func (m *BrandsDetailRes) String() string { return proto.CompactTextString(m) }
func (*BrandsDetailRes) ProtoMessage()    {}
func (*BrandsDetailRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *BrandsDetailRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandsDetailRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandsDetailRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandsDetailRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandsDetailRes.Merge(m, src)
}
func (m *BrandsDetailRes) XXX_Size() int {
	return m.Size()
}
func (m *BrandsDetailRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandsDetailRes.DiscardUnknown(m)
}

var xxx_messageInfo_BrandsDetailRes proto.InternalMessageInfo

// 制造商列表Res
type BrandListRes struct {
	// 商品列表
	BrandList []*BrandsDetailRes `protobuf:"bytes,1,rep,name=brandList,proto3" json:"brandList" form:"brandList"`
	// 商品总数
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total" form:"total"`
}

func (m *BrandListRes) Reset()         { *m = BrandListRes{} }
func (m *BrandListRes) String() string { return proto.CompactTextString(m) }
func (*BrandListRes) ProtoMessage()    {}
func (*BrandListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *BrandListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandListRes.Merge(m, src)
}
func (m *BrandListRes) XXX_Size() int {
	return m.Size()
}
func (m *BrandListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandListRes.DiscardUnknown(m)
}

var xxx_messageInfo_BrandListRes proto.InternalMessageInfo

// 制造商列表Req
type BrandsListReq struct {
	// 页数
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page" form:"page"`
	// 每页数量
	Size_ int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size" form:"size"`
}

func (m *BrandsListReq) Reset()         { *m = BrandsListReq{} }
func (m *BrandsListReq) String() string { return proto.CompactTextString(m) }
func (*BrandsListReq) ProtoMessage()    {}
func (*BrandsListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}
func (m *BrandsListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandsListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandsListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandsListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandsListReq.Merge(m, src)
}
func (m *BrandsListReq) XXX_Size() int {
	return m.Size()
}
func (m *BrandsListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandsListReq.DiscardUnknown(m)
}

var xxx_messageInfo_BrandsListReq proto.InternalMessageInfo

// 商品规格
type GoodsSize struct {
	// 商品规格id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 商品规格名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	// 可选属性
	ValueList []*GoodsSpec `protobuf:"bytes,3,rep,name=valueList,proto3" json:"valueList" form:"valueList"`
}

func (m *GoodsSize) Reset()         { *m = GoodsSize{} }
func (m *GoodsSize) String() string { return proto.CompactTextString(m) }
func (*GoodsSize) ProtoMessage()    {}
func (*GoodsSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}
func (m *GoodsSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsSize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsSize.Merge(m, src)
}
func (m *GoodsSize) XXX_Size() int {
	return m.Size()
}
func (m *GoodsSize) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsSize.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsSize proto.InternalMessageInfo

// 商品规格列表
type GoodsSizeList struct {
	// 商品规格
	GoodsSizeList []*GoodsSize `protobuf:"bytes,1,rep,name=GoodsSizeList,proto3" json:"goodsSizeList" form:"goodsSizeList"`
}

func (m *GoodsSizeList) Reset()         { *m = GoodsSizeList{} }
func (m *GoodsSizeList) String() string { return proto.CompactTextString(m) }
func (*GoodsSizeList) ProtoMessage()    {}
func (*GoodsSizeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}
func (m *GoodsSizeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsSizeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsSizeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsSizeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsSizeList.Merge(m, src)
}
func (m *GoodsSizeList) XXX_Size() int {
	return m.Size()
}
func (m *GoodsSizeList) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsSizeList.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsSizeList proto.InternalMessageInfo

// 商品属性
type GoodsSpec struct {
	// 商品id
	GoodsId int32 `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id" form:"goods_id"`
	// 商品属性id
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id" form:"id"`
	// 商品规格名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	// 商品属性图片
	PicUrl string `protobuf:"bytes,4,opt,name=pic_url,json=picUrl,proto3" json:"pic_url" form:"pic_url"`
	// 商品规格id
	SpecificationId int32 `protobuf:"varint,5,opt,name=specification_id,json=specificationId,proto3" json:"specification_id" form:"specification_id"`
	// 商品属性名称
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value" form:"value"`
}

func (m *GoodsSpec) Reset()         { *m = GoodsSpec{} }
func (m *GoodsSpec) String() string { return proto.CompactTextString(m) }
func (*GoodsSpec) ProtoMessage()    {}
func (*GoodsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}
func (m *GoodsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsSpec.Merge(m, src)
}
func (m *GoodsSpec) XXX_Size() int {
	return m.Size()
}
func (m *GoodsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsSpec proto.InternalMessageInfo

// 商品售卖信息Req
type GoodsSellReq struct {
	// 商品 id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
}

func (m *GoodsSellReq) Reset()         { *m = GoodsSellReq{} }
func (m *GoodsSellReq) String() string { return proto.CompactTextString(m) }
func (*GoodsSellReq) ProtoMessage()    {}
func (*GoodsSellReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}
func (m *GoodsSellReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsSellReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsSellReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsSellReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsSellReq.Merge(m, src)
}
func (m *GoodsSellReq) XXX_Size() int {
	return m.Size()
}
func (m *GoodsSellReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsSellReq.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsSellReq proto.InternalMessageInfo

// 商品轮播图
type GoodsGallery struct {
	// id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 商品id
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id" form:"goods_id"`
	// 轮播图图片
	ImgUrl string `protobuf:"bytes,3,opt,name=img_url,json=imgUrl,proto3" json:"img_url" form:"img_url"`
	// 轮播描述
	ImgDesc string `protobuf:"bytes,4,opt,name=img_desc,json=imgDesc,proto3" json:"img_desc" form:"img_desc"`
}

func (m *GoodsGallery) Reset()         { *m = GoodsGallery{} }
func (m *GoodsGallery) String() string { return proto.CompactTextString(m) }
func (*GoodsGallery) ProtoMessage()    {}
func (*GoodsGallery) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}
func (m *GoodsGallery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsGallery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsGallery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsGallery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsGallery.Merge(m, src)
}
func (m *GoodsGallery) XXX_Size() int {
	return m.Size()
}
func (m *GoodsGallery) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsGallery.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsGallery proto.InternalMessageInfo

// 轮播图列表
type GoodsGalleryList struct {
	// 商品规格描述列表
	GoodsGallery []*GoodsGallery `protobuf:"bytes,1,rep,name=goodsGallery,proto3" json:"goodsGallery" form:"goodsGallery"`
}

func (m *GoodsGalleryList) Reset()         { *m = GoodsGalleryList{} }
func (m *GoodsGalleryList) String() string { return proto.CompactTextString(m) }
func (*GoodsGalleryList) ProtoMessage()    {}
func (*GoodsGalleryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}
func (m *GoodsGalleryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsGalleryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsGalleryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsGalleryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsGalleryList.Merge(m, src)
}
func (m *GoodsGalleryList) XXX_Size() int {
	return m.Size()
}
func (m *GoodsGalleryList) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsGalleryList.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsGalleryList proto.InternalMessageInfo

// 商品特点
type Attribute struct {
	// 特点标签
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" form:"name"`
	// 特点详情
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" form:"value"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}
func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return m.Size()
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

// 商品特点列表
type AttributeList struct {
	// 商品特点列表
	AttributeList []*Attribute `protobuf:"bytes,1,rep,name=attributeList,proto3" json:"attributeList" form:"attributeList"`
}

func (m *AttributeList) Reset()         { *m = AttributeList{} }
func (m *AttributeList) String() string { return proto.CompactTextString(m) }
func (*AttributeList) ProtoMessage()    {}
func (*AttributeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}
func (m *AttributeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttributeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttributeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttributeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributeList.Merge(m, src)
}
func (m *AttributeList) XXX_Size() int {
	return m.Size()
}
func (m *AttributeList) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributeList.DiscardUnknown(m)
}

var xxx_messageInfo_AttributeList proto.InternalMessageInfo

// 商品常见疑问
type GoodsIssue struct {
	// id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 商品id
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id" form:"goods_id"`
	// 商品常见疑问
	Question int32 `protobuf:"varint,3,opt,name=question,proto3" json:"question" form:"question"`
	// 疑问解答
	Answer int32 `protobuf:"varint,4,opt,name=answer,proto3" json:"answer" form:"answer"`
}

func (m *GoodsIssue) Reset()         { *m = GoodsIssue{} }
func (m *GoodsIssue) String() string { return proto.CompactTextString(m) }
func (*GoodsIssue) ProtoMessage()    {}
func (*GoodsIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}
func (m *GoodsIssue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsIssue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsIssue.Merge(m, src)
}
func (m *GoodsIssue) XXX_Size() int {
	return m.Size()
}
func (m *GoodsIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsIssue.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsIssue proto.InternalMessageInfo

// 商品疑问列表
type GoodsIssueList struct {
	// 商品疑问列表
	GoodsIssue []*GoodsIssue `protobuf:"bytes,1,rep,name=goodsIssue,proto3" json:"goodsIssue" form:"goodsIssue"`
}

func (m *GoodsIssueList) Reset()         { *m = GoodsIssueList{} }
func (m *GoodsIssueList) String() string { return proto.CompactTextString(m) }
func (*GoodsIssueList) ProtoMessage()    {}
func (*GoodsIssueList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}
func (m *GoodsIssueList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsIssueList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsIssueList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsIssueList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsIssueList.Merge(m, src)
}
func (m *GoodsIssueList) XXX_Size() int {
	return m.Size()
}
func (m *GoodsIssueList) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsIssueList.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsIssueList proto.InternalMessageInfo

// 商品产品信息
type Product struct {
	// id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	// 商品id
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id" form:"goods_id"`
	// 商品组合属性
	GoodsSpecificationIds string `protobuf:"bytes,3,opt,name=goods_specification_ids,json=goodsSpecificationIds,proto3" json:"goods_specification_ids" form:"goods_specification_ids"`
	// 产品库存
	GoodsNumber int32 `protobuf:"varint,4,opt,name=goods_number,json=goodsNumber,proto3" json:"goods_number" form:"goods_number"`
	// 产品价格
	RetailPrice float64 `protobuf:"fixed64,5,opt,name=retail_price,json=retailPrice,proto3" json:"retail_price" form:"retail_price"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

// 商品产品列表
type GoodsProductList struct {
	// 产品列表
	ProductList []*Product `protobuf:"bytes,1,rep,name=productList,proto3" json:"productList" form:"productList"`
}

func (m *GoodsProductList) Reset()         { *m = GoodsProductList{} }
func (m *GoodsProductList) String() string { return proto.CompactTextString(m) }
func (*GoodsProductList) ProtoMessage()    {}
func (*GoodsProductList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}
func (m *GoodsProductList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsProductList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsProductList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsProductList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsProductList.Merge(m, src)
}
func (m *GoodsProductList) XXX_Size() int {
	return m.Size()
}
func (m *GoodsProductList) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsProductList.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsProductList proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CategoryChildReq)(nil), "goods.service.v1.CategoryChildReq")
	proto.RegisterType((*CategoryReq)(nil), "goods.service.v1.CategoryReq")
	proto.RegisterType((*CategoryRes)(nil), "goods.service.v1.CategoryRes")
	proto.RegisterType((*CateGoryListRes)(nil), "goods.service.v1.CateGoryListRes")
	proto.RegisterType((*GoodsDetailReq)(nil), "goods.service.v1.GoodsDetailReq")
	proto.RegisterType((*GoodsReq)(nil), "goods.service.v1.GoodsReq")
	proto.RegisterType((*GoodsListRes)(nil), "goods.service.v1.GoodsListRes")
	proto.RegisterType((*GoodsRes)(nil), "goods.service.v1.GoodsRes")
	proto.RegisterType((*BrandsDetailReq)(nil), "goods.service.v1.BrandsDetailReq")
	proto.RegisterType((*BrandsDetailRes)(nil), "goods.service.v1.BrandsDetailRes")
	proto.RegisterType((*BrandListRes)(nil), "goods.service.v1.BrandListRes")
	proto.RegisterType((*BrandsListReq)(nil), "goods.service.v1.BrandsListReq")
	proto.RegisterType((*GoodsSize)(nil), "goods.service.v1.GoodsSize")
	proto.RegisterType((*GoodsSizeList)(nil), "goods.service.v1.GoodsSizeList")
	proto.RegisterType((*GoodsSpec)(nil), "goods.service.v1.GoodsSpec")
	proto.RegisterType((*GoodsSellReq)(nil), "goods.service.v1.GoodsSellReq")
	proto.RegisterType((*GoodsGallery)(nil), "goods.service.v1.GoodsGallery")
	proto.RegisterType((*GoodsGalleryList)(nil), "goods.service.v1.GoodsGalleryList")
	proto.RegisterType((*Attribute)(nil), "goods.service.v1.Attribute")
	proto.RegisterType((*AttributeList)(nil), "goods.service.v1.AttributeList")
	proto.RegisterType((*GoodsIssue)(nil), "goods.service.v1.GoodsIssue")
	proto.RegisterType((*GoodsIssueList)(nil), "goods.service.v1.GoodsIssueList")
	proto.RegisterType((*Product)(nil), "goods.service.v1.Product")
	proto.RegisterType((*GoodsProductList)(nil), "goods.service.v1.GoodsProductList")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0x8f, 0x6d, 0x12, 0xc7, 0x63, 0xe7, 0xd7, 0x04, 0xbe, 0x09, 0x01, 0xbc, 0x61, 0xd0, 0x57,
	0x50, 0xa1, 0xc6, 0x2a, 0xa8, 0x54, 0x02, 0xb5, 0x52, 0x1d, 0x44, 0x1a, 0x54, 0xa5, 0x74, 0x10,
	0x17, 0x5a, 0x61, 0xad, 0xed, 0xc9, 0x32, 0xd4, 0xf6, 0x6e, 0x76, 0xd7, 0x89, 0x82, 0x84, 0x2a,
	0xf5, 0xda, 0x4b, 0xa5, 0x1e, 0xdb, 0x5b, 0xff, 0x87, 0x5e, 0xf8, 0x07, 0x38, 0x22, 0xf5, 0xd2,
	0xd3, 0xb6, 0x25, 0x3d, 0xf9, 0xe8, 0x5b, 0x6f, 0xd5, 0xbc, 0x99, 0xd9, 0x19, 0x3b, 0x38, 0x31,
	0x51, 0x73, 0xdb, 0xf7, 0x99, 0x79, 0xef, 0xed, 0xbc, 0xf7, 0x79, 0x6f, 0xde, 0x2e, 0x2a, 0xb8,
	0x01, 0x5f, 0x0b, 0x42, 0x3f, 0xf6, 0xf1, 0xbc, 0xe7, 0xfb, 0xcd, 0x68, 0x2d, 0x62, 0xe1, 0x2e,
	0x6f, 0xb0, 0xb5, 0xdd, 0x0f, 0x56, 0xde, 0xf7, 0x78, 0xfc, 0xb4, 0x5b, 0x5f, 0x6b, 0xf8, 0xed,
	0x8a, 0xe7, 0x7b, 0x7e, 0x05, 0x36, 0xd6, 0xbb, 0xdb, 0x20, 0x81, 0x00, 0x4f, 0xd2, 0xc0, 0xca,
	0x05, 0xcf, 0xf7, 0xbd, 0x16, 0x33, 0xbb, 0x58, 0x3b, 0x88, 0xf7, 0xd5, 0xe2, 0x45, 0xb5, 0xe8,
	0x06, 0xbc, 0xe2, 0x76, 0x3a, 0x7e, 0xec, 0xc6, 0xdc, 0xef, 0x44, 0x72, 0x95, 0x7c, 0x81, 0xe6,
	0xd7, 0xdd, 0x98, 0x79, 0x7e, 0xb8, 0xbf, 0xfe, 0x94, 0xb7, 0x9a, 0x94, 0xed, 0xe0, 0x3b, 0x68,
	0x3a, 0x70, 0x43, 0xd6, 0x89, 0x37, 0x9b, 0xcb, 0x99, 0xd5, 0xcc, 0xb5, 0xc9, 0xaa, 0xd3, 0x4b,
	0x9c, 0x14, 0xeb, 0x27, 0xce, 0xdc, 0xb6, 0x1f, 0xb6, 0x6f, 0x13, 0x8d, 0x10, 0x9a, 0x2e, 0x92,
	0x1b, 0xa8, 0xa8, 0x0d, 0x0a, 0x5b, 0x57, 0x50, 0x96, 0x6b, 0x2b, 0x8b, 0xbd, 0xc4, 0xc9, 0x72,
	0xa1, 0x5f, 0x90, 0xfa, 0xbc, 0x49, 0x68, 0x96, 0x37, 0xc9, 0xaf, 0x39, 0x5b, 0x29, 0x1a, 0x4b,
	0x09, 0x5f, 0x47, 0x67, 0x3a, 0x6e, 0x9b, 0x2d, 0x67, 0x57, 0x33, 0xd7, 0x0a, 0xd5, 0xa5, 0x5e,
	0xe2, 0x80, 0xdc, 0x4f, 0x9c, 0xa2, 0xdc, 0x28, 0x24, 0x42, 0x01, 0xc4, 0x55, 0x84, 0xb6, 0x43,
	0xbf, 0x13, 0xd7, 0x9a, 0x2c, 0x6a, 0x2c, 0xe7, 0x40, 0xe5, 0x4a, 0x2f, 0x71, 0x2c, 0xb4, 0x9f,
	0x38, 0x0b, 0x52, 0xd1, 0x60, 0x84, 0x16, 0x40, 0xb8, 0xcb, 0xa2, 0x86, 0xb1, 0x01, 0x6e, 0xcf,
	0x0c, 0xdb, 0x50, 0xce, 0x07, 0x6c, 0xc8, 0x57, 0x90, 0x36, 0xb6, 0xc4, 0x7b, 0x7c, 0x82, 0x0a,
	0x32, 0x52, 0x35, 0xde, 0x5c, 0x9e, 0x84, 0x03, 0x5e, 0xee, 0x25, 0x8e, 0x01, 0xfb, 0x89, 0x33,
	0x6f, 0x07, 0xb7, 0xc6, 0xed, 0xe8, 0xe2, 0x2f, 0xd1, 0xec, 0x9e, 0x1b, 0xd4, 0xea, 0x6e, 0xa7,
	0xc3, 0xc2, 0x5a, 0x37, 0x6c, 0x2d, 0x4f, 0xc1, 0x7b, 0x5c, 0xef, 0x25, 0xce, 0xd0, 0x4a, 0x3f,
	0x71, 0xce, 0x49, 0x4b, 0x83, 0x38, 0xa1, 0xa5, 0x3d, 0x37, 0xa8, 0x82, 0xfc, 0x28, 0x6c, 0xe1,
	0xdb, 0x68, 0x9a, 0x37, 0xfc, 0x0e, 0x18, 0xcb, 0x83, 0x31, 0xc8, 0xb6, 0xc6, 0x4c, 0xb6, 0x35,
	0x42, 0x68, 0x5e, 0x3c, 0x3e, 0x0a, 0x5b, 0xe4, 0x05, 0x9a, 0x13, 0x79, 0xdb, 0xf0, 0xc3, 0xfd,
	0xcf, 0x79, 0x14, 0x8b, 0xdc, 0x3d, 0x43, 0xa5, 0x86, 0x4a, 0xa5, 0x80, 0x96, 0x33, 0xab, 0xb9,
	0x6b, 0xc5, 0x1b, 0x97, 0xd6, 0x86, 0x39, 0xbe, 0x66, 0x25, 0xbc, 0x7a, 0xb5, 0x97, 0x38, 0x03,
	0x6a, 0xfd, 0xc4, 0x59, 0x94, 0x5e, 0x6d, 0x94, 0xd0, 0x81, 0x4d, 0xe4, 0x43, 0x34, 0xbb, 0x21,
	0xcc, 0xde, 0x65, 0xb1, 0xcb, 0x5b, 0x63, 0xd3, 0xed, 0xfb, 0x2c, 0x9a, 0x06, 0x3d, 0xa1, 0x51,
	0x41, 0x93, 0x3c, 0xfa, 0xcc, 0x8f, 0x95, 0xd2, 0xf9, 0x5e, 0xe2, 0x48, 0xa0, 0x9f, 0x38, 0x25,
	0xa5, 0x27, 0x44, 0x42, 0x25, 0x2c, 0x15, 0xb6, 0xd8, 0x1e, 0x10, 0x2f, 0x55, 0xd8, 0x62, 0x7b,
	0xb6, 0xc2, 0x16, 0xdb, 0x03, 0x85, 0x2d, 0xb6, 0x27, 0x88, 0x1a, 0xb8, 0x1e, 0x03, 0xd6, 0x4d,
	0x4a, 0xa2, 0x0a, 0xd9, 0x10, 0x55, 0x48, 0x84, 0x02, 0x28, 0x36, 0x47, 0xfc, 0xb9, 0xa4, 0x97,
	0xda, 0x2c, 0x64, 0xb3, 0x59, 0x48, 0x84, 0x02, 0x88, 0xd7, 0x11, 0xd2, 0xf1, 0xd8, 0xd4, 0x74,
	0x02, 0x46, 0x1a, 0xd4, 0x30, 0xd2, 0x60, 0x84, 0x5a, 0x1b, 0xc8, 0xcf, 0x19, 0x54, 0x82, 0x68,
	0xe8, 0x0c, 0x7e, 0x85, 0x0a, 0x9e, 0x96, 0x55, 0xfa, 0x56, 0x0e, 0xa7, 0x4f, 0x05, 0x30, 0x92,
	0xfc, 0x4d, 0x15, 0x0c, 0x7f, 0x53, 0x88, 0x50, 0xb3, 0x2c, 0xa2, 0x17, 0xfb, 0xb1, 0xdb, 0xb2,
	0xa3, 0x07, 0x80, 0x89, 0x1e, 0x88, 0x84, 0x4a, 0x98, 0xbc, 0xcc, 0xa5, 0xc9, 0x3a, 0x8d, 0xc6,
	0x70, 0x1f, 0x95, 0x42, 0x60, 0x4f, 0x2d, 0x08, 0x79, 0x43, 0x26, 0x29, 0x23, 0xf9, 0x68, 0xe3,
	0x86, 0x8f, 0x36, 0x4a, 0x68, 0x51, 0x8a, 0x0f, 0x84, 0x84, 0xef, 0xa1, 0x22, 0x1c, 0xb4, 0x56,
	0x0f, 0x39, 0xdb, 0x56, 0x1d, 0xe2, 0xff, 0xbd, 0xc4, 0xb1, 0xe1, 0x7e, 0xe2, 0x60, 0x2b, 0x40,
	0x12, 0x24, 0x14, 0x81, 0x54, 0x15, 0x02, 0xde, 0x44, 0xa5, 0x16, 0x8f, 0xe2, 0x5a, 0xc0, 0x1b,
	0x50, 0x95, 0x93, 0x60, 0x08, 0xde, 0xc9, 0xc6, 0xcd, 0x3b, 0xd9, 0x28, 0xa1, 0x48, 0x88, 0x0f,
	0x78, 0x43, 0x14, 0x77, 0x15, 0x49, 0xc3, 0xb2, 0xef, 0x4d, 0x99, 0x9e, 0x65, 0x50, 0xc3, 0x10,
	0x83, 0xe9, 0x94, 0x41, 0xdf, 0xbb, 0x8d, 0xa6, 0xeb, 0xa1, 0xdb, 0x69, 0x8a, 0x96, 0x95, 0x37,
	0xd7, 0x81, 0xc6, 0x4c, 0x83, 0xd0, 0x08, 0xa1, 0x79, 0x78, 0xdc, 0x6c, 0x92, 0xfb, 0x68, 0xae,
	0x2a, 0x1e, 0xad, 0x12, 0xfd, 0xc8, 0xca, 0xe1, 0xd5, 0x34, 0x87, 0x97, 0xd2, 0x1c, 0xae, 0xee,
	0xba, 0x2d, 0xde, 0x74, 0x63, 0x26, 0x62, 0xbd, 0xd3, 0xe5, 0x21, 0x53, 0x65, 0x7b, 0x90, 0x19,
	0x36, 0x76, 0x1a, 0x84, 0xb8, 0x87, 0x8a, 0x11, 0x6f, 0x07, 0x2d, 0x66, 0x5f, 0x15, 0x90, 0x44,
	0x0b, 0x36, 0x49, 0xb4, 0x40, 0x42, 0x91, 0x94, 0x20, 0x6a, 0xb7, 0x50, 0x5e, 0xe7, 0x4f, 0x12,
	0xe1, 0x52, 0x2f, 0x71, 0xf2, 0x26, 0x75, 0xb3, 0xaa, 0xf6, 0x75, 0xd6, 0xa6, 0x02, 0xc8, 0x18,
	0xf9, 0x25, 0x83, 0x4a, 0x70, 0x4a, 0x5d, 0x8e, 0x75, 0x54, 0xa8, 0x6b, 0x59, 0x95, 0xe3, 0xe5,
	0xc3, 0xe5, 0x38, 0x14, 0x18, 0x59, 0x95, 0xa9, 0x9e, 0xa9, 0xca, 0x14, 0x22, 0xd4, 0x2c, 0xbf,
	0x7b, 0x55, 0x72, 0x34, 0x23, 0x3d, 0xca, 0xb7, 0xdc, 0x49, 0x9b, 0x5c, 0xf6, 0x5d, 0x9a, 0x5c,
	0x6e, 0x8c, 0x26, 0x47, 0x5e, 0x66, 0x50, 0x01, 0x1a, 0xc0, 0x43, 0xd1, 0xf2, 0xfe, 0xfb, 0x84,
	0x7f, 0x8d, 0x0a, 0xbb, 0x6e, 0xab, 0xcb, 0x20, 0xbe, 0x39, 0x88, 0xef, 0x85, 0x11, 0xed, 0xee,
	0x61, 0xc0, 0x1a, 0x32, 0xb2, 0xa9, 0x86, 0x89, 0x6c, 0x0a, 0x11, 0x6a, 0x96, 0xc9, 0x0b, 0x34,
	0x93, 0xbe, 0x3c, 0x84, 0xba, 0x35, 0x04, 0xa8, 0x94, 0x8e, 0x74, 0xc9, 0x9f, 0xb3, 0xea, 0x7b,
	0xbd, 0xc4, 0x99, 0xf1, 0x6c, 0xad, 0x7e, 0xe2, 0x9c, 0xb5, 0x8a, 0x56, 0xc3, 0x84, 0x0e, 0x1a,
	0x27, 0x49, 0x56, 0x07, 0x2f, 0x60, 0x50, 0xc9, 0xb2, 0xc6, 0xf9, 0xc0, 0x60, 0xa7, 0x31, 0x53,
	0xc9, 0x1a, 0x21, 0x34, 0x0f, 0x8f, 0x9b, 0x4d, 0x15, 0xf8, 0xec, 0x78, 0x81, 0xcf, 0x8d, 0x13,
	0xf8, 0x13, 0x56, 0x08, 0x7e, 0x8c, 0xe6, 0xa3, 0x80, 0x35, 0xf8, 0x36, 0x6f, 0xc0, 0x28, 0x6b,
	0x46, 0xa9, 0x4a, 0x2f, 0x71, 0x0e, 0xad, 0xf5, 0x13, 0x67, 0x49, 0xb1, 0x6a, 0x68, 0x85, 0xd0,
	0xb9, 0x01, 0x68, 0xb3, 0x29, 0x0a, 0x01, 0x72, 0xa7, 0x5a, 0x25, 0x14, 0x02, 0x00, 0xa6, 0x10,
	0x40, 0x24, 0x54, 0xc2, 0xe4, 0xa6, 0xba, 0x3c, 0x1f, 0xb2, 0xd6, 0xf8, 0x03, 0xc8, 0x81, 0xbe,
	0x72, 0x37, 0xdc, 0x56, 0x8b, 0x85, 0xfb, 0xe3, 0xb1, 0xda, 0xce, 0x5e, 0xf6, 0x1d, 0xb3, 0x77,
	0x0b, 0xe5, 0x79, 0xdb, 0x83, 0x58, 0xe7, 0x4c, 0xac, 0x15, 0x64, 0x62, 0xad, 0x00, 0x42, 0xa7,
	0x78, 0xdb, 0xd3, 0xc3, 0x61, 0xdb, 0x93, 0xad, 0xf0, 0x8c, 0x35, 0x1c, 0x2a, 0xcc, 0x1a, 0x0e,
	0x15, 0x22, 0x86, 0xc3, 0xb6, 0x27, 0x3a, 0x20, 0xf9, 0x16, 0xcd, 0xdb, 0x87, 0x04, 0xf6, 0x7f,
	0x83, 0x4a, 0x9e, 0x85, 0x29, 0xf2, 0x97, 0x47, 0x90, 0x5f, 0xed, 0x92, 0x57, 0x9f, 0xad, 0x67,
	0xae, 0x3e, 0x1b, 0x25, 0x74, 0x60, 0x13, 0xe1, 0xa8, 0xf0, 0x69, 0x1c, 0x87, 0xbc, 0xde, 0x8d,
	0x59, 0x4a, 0xcd, 0xcc, 0x38, 0xd4, 0x4c, 0x69, 0x90, 0x1d, 0x93, 0x06, 0x2f, 0xd0, 0x4c, 0xea,
	0x4a, 0x97, 0xb9, 0x6b, 0x03, 0xa3, 0xcb, 0x3c, 0xd5, 0x93, 0x65, 0x3e, 0xa0, 0x65, 0xca, 0x7c,
	0x00, 0x26, 0x74, 0x70, 0x1b, 0xf9, 0x23, 0x83, 0x10, 0x44, 0x6c, 0x33, 0x8a, 0xba, 0xec, 0xf4,
	0xe9, 0x74, 0x07, 0x4d, 0xef, 0x74, 0x59, 0x24, 0x8a, 0x46, 0x35, 0x71, 0xd0, 0xd5, 0x98, 0xd1,
	0xd5, 0x08, 0xa1, 0xe9, 0x22, 0xbe, 0x89, 0xa6, 0xdc, 0x4e, 0xb4, 0xc7, 0x42, 0x35, 0xe4, 0x5e,
	0xe8, 0x25, 0x8e, 0x42, 0xfa, 0x89, 0x33, 0xa3, 0xce, 0x0b, 0x32, 0xa1, 0x6a, 0x81, 0x44, 0x6a,
	0xd4, 0x87, 0x03, 0x42, 0x84, 0x5d, 0x35, 0xda, 0x00, 0xa2, 0xc2, 0x7b, 0x71, 0x04, 0x91, 0x60,
	0x8f, 0x35, 0xf8, 0x80, 0x3c, 0x34, 0xf8, 0x00, 0xa6, 0x07, 0x31, 0x29, 0xfc, 0x93, 0x45, 0xf9,
	0x07, 0xa1, 0xdf, 0xec, 0x36, 0xe2, 0xd3, 0x8f, 0x69, 0x17, 0x2d, 0x49, 0x74, 0xb8, 0x4d, 0x45,
	0xaa, 0x64, 0x3f, 0xee, 0x25, 0xce, 0xa8, 0x2d, 0xfd, 0xc4, 0x29, 0xdb, 0x96, 0x0f, 0x6d, 0x20,
	0xf4, 0x9c, 0xa7, 0xef, 0x01, 0xab, 0xe1, 0x45, 0x62, 0x00, 0x96, 0x2a, 0x9d, 0x6e, 0xbb, 0x9e,
	0xe6, 0xc4, 0x54, 0x9c, 0xc2, 0x87, 0x2a, 0x4e, 0xa1, 0x84, 0xca, 0xd1, 0x76, 0x0b, 0xa4, 0x43,
	0xc3, 0xf4, 0xe4, 0xc9, 0x87, 0x69, 0xb2, 0xab, 0xba, 0x87, 0x8a, 0x3f, 0xa4, 0xbc, 0x8e, 0x8a,
	0x81, 0x11, 0x55, 0xce, 0xcf, 0x1f, 0xce, 0xb9, 0xd2, 0x91, 0x63, 0x9b, 0xa5, 0x61, 0xc6, 0x36,
	0x0b, 0x24, 0xd4, 0xde, 0x72, 0xe3, 0xa7, 0x02, 0x9a, 0x04, 0xc7, 0xf8, 0x09, 0x9a, 0xdd, 0x60,
	0xb1, 0xf5, 0x81, 0x89, 0x57, 0x47, 0xd0, 0x2b, 0x1d, 0x6e, 0x57, 0x8e, 0xf8, 0x50, 0x22, 0xb3,
	0xdf, 0xfd, 0xf6, 0xf7, 0x8f, 0xd9, 0x69, 0x3c, 0x55, 0x81, 0x3d, 0xb8, 0x86, 0x4a, 0xda, 0x3e,
	0x9c, 0x6e, 0xb4, 0xee, 0xce, 0xca, 0xa8, 0x0e, 0xa9, 0x86, 0x44, 0xb2, 0x08, 0xb6, 0x67, 0x70,
	0x51, 0xda, 0xae, 0x88, 0x4f, 0x00, 0xbc, 0x0d, 0x07, 0x80, 0x39, 0x4d, 0x1d, 0xe0, 0xd8, 0xc1,
	0x71, 0x67, 0xe5, 0xf8, 0xd9, 0xd2, 0x3a, 0x08, 0x4c, 0x90, 0xb8, 0x09, 0x07, 0x49, 0x87, 0x56,
	0xec, 0x8c, 0x32, 0xa1, 0x86, 0xc5, 0xb7, 0x9d, 0xc6, 0x1e, 0x79, 0xad, 0xd3, 0x80, 0x03, 0x79,
	0x9a, 0x00, 0xcd, 0x6d, 0xb0, 0x78, 0xdd, 0xfa, 0xfe, 0xc7, 0x64, 0xf4, 0x5f, 0x05, 0xfd, 0x33,
	0xeb, 0x6d, 0xe7, 0x19, 0xfa, 0x65, 0x41, 0xfe, 0x07, 0xee, 0xe6, 0xf1, 0x6c, 0x45, 0x7f, 0x16,
	0x4b, 0x8f, 0x4f, 0x50, 0xd1, 0xf2, 0x88, 0x8f, 0xfc, 0x87, 0xb1, 0xb3, 0x72, 0xf4, 0x2f, 0x0e,
	0xb2, 0x00, 0x4e, 0x8a, 0xb8, 0x90, 0x3a, 0xc1, 0xcf, 0x0c, 0x01, 0x60, 0xb6, 0x3d, 0x9e, 0x5e,
	0xce, 0x11, 0x53, 0x22, 0x70, 0x79, 0x09, 0xbc, 0x2c, 0xe0, 0x39, 0xc5, 0x83, 0x48, 0x8f, 0x9d,
	0x3e, 0x44, 0x6f, 0x60, 0xe8, 0x38, 0xde, 0x1d, 0x39, 0xfa, 0x5e, 0x06, 0x8f, 0x26, 0x78, 0xd2,
	0xa3, 0xa7, 0xac, 0x07, 0x68, 0x41, 0x3b, 0x34, 0x97, 0xf0, 0x89, 0x4e, 0x38, 0x70, 0xb1, 0x92,
	0x65, 0xf0, 0x87, 0xf1, 0xbc, 0xf2, 0x97, 0x5e, 0x84, 0xb8, 0x6d, 0x3c, 0x9a, 0x5b, 0xe2, 0x78,
	0x8f, 0xab, 0x47, 0xdd, 0x19, 0xe0, 0xf2, 0x2c, 0xb8, 0x9c, 0xc5, 0x25, 0xe5, 0x92, 0xc3, 0x25,
	0x1b, 0xa1, 0x45, 0xed, 0xce, 0xee, 0x51, 0x27, 0x8f, 0xaa, 0x65, 0xe5, 0x50, 0x54, 0x55, 0x87,
	0xaa, 0x5e, 0x7e, 0xf5, 0x57, 0x79, 0xe2, 0xd5, 0x9b, 0x72, 0xe6, 0xf5, 0x9b, 0x72, 0xe6, 0xcf,
	0x37, 0xe5, 0xcc, 0x0f, 0x07, 0xe5, 0x89, 0xd7, 0x07, 0xe5, 0x89, 0xdf, 0x0f, 0xca, 0x13, 0x8f,
	0x73, 0x6e, 0xc0, 0xeb, 0x53, 0xf0, 0x63, 0xf7, 0xe6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b,
	0xd8, 0x82, 0x96, 0x61, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoodsClient interface {
	// 获取商品详情
	GetGoodsDetail(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsRes, error)
	// 获取商品列表
	GetGoodsList(ctx context.Context, in *GoodsReq, opts ...grpc.CallOption) (*GoodsListRes, error)
	// 获取制造商详情
	GetBrandDetail(ctx context.Context, in *BrandsDetailReq, opts ...grpc.CallOption) (*BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(ctx context.Context, in *BrandsListReq, opts ...grpc.CallOption) (*BrandListRes, error)
	// 获取子商品分类列表
	GetCategoryList(ctx context.Context, in *CategoryChildReq, opts ...grpc.CallOption) (*CateGoryListRes, error)
	// 获取商品分类详情
	GetCategory(ctx context.Context, in *CategoryReq, opts ...grpc.CallOption) (*CategoryRes, error)
	// 获取商品可选规格
	GetGoodsSize(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsSizeList, error)
	// 获取商品轮播图
	GetGoodsGallery(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsGalleryList, error)
	// 获取商品特点
	GetGoodsAttribute(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*AttributeList, error)
	// 获取商品常见疑问
	GetGoodsIssueList(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsIssueList, error)
	// 获取商品产品列表
	GetGoodsProductList(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsProductList, error)
}

type goodsClient struct {
	cc *grpc.ClientConn
}

func NewGoodsClient(cc *grpc.ClientConn) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) GetGoodsDetail(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsRes, error) {
	out := new(GoodsRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsList(ctx context.Context, in *GoodsReq, opts ...grpc.CallOption) (*GoodsListRes, error) {
	out := new(GoodsListRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBrandDetail(ctx context.Context, in *BrandsDetailReq, opts ...grpc.CallOption) (*BrandsDetailRes, error) {
	out := new(BrandsDetailRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetBrandDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBrandList(ctx context.Context, in *BrandsListReq, opts ...grpc.CallOption) (*BrandListRes, error) {
	out := new(BrandListRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetCategoryList(ctx context.Context, in *CategoryChildReq, opts ...grpc.CallOption) (*CateGoryListRes, error) {
	out := new(CateGoryListRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetCategory(ctx context.Context, in *CategoryReq, opts ...grpc.CallOption) (*CategoryRes, error) {
	out := new(CategoryRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsSize(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsSizeList, error) {
	out := new(GoodsSizeList)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsGallery(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsGalleryList, error) {
	out := new(GoodsGalleryList)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsGallery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsAttribute(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*AttributeList, error) {
	out := new(AttributeList)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsIssueList(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsIssueList, error) {
	out := new(GoodsIssueList)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsProductList(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsProductList, error) {
	out := new(GoodsProductList)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
type GoodsServer interface {
	// 获取商品详情
	GetGoodsDetail(context.Context, *GoodsDetailReq) (*GoodsRes, error)
	// 获取商品列表
	GetGoodsList(context.Context, *GoodsReq) (*GoodsListRes, error)
	// 获取制造商详情
	GetBrandDetail(context.Context, *BrandsDetailReq) (*BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(context.Context, *BrandsListReq) (*BrandListRes, error)
	// 获取子商品分类列表
	GetCategoryList(context.Context, *CategoryChildReq) (*CateGoryListRes, error)
	// 获取商品分类详情
	GetCategory(context.Context, *CategoryReq) (*CategoryRes, error)
	// 获取商品可选规格
	GetGoodsSize(context.Context, *GoodsDetailReq) (*GoodsSizeList, error)
	// 获取商品轮播图
	GetGoodsGallery(context.Context, *GoodsDetailReq) (*GoodsGalleryList, error)
	// 获取商品特点
	GetGoodsAttribute(context.Context, *GoodsDetailReq) (*AttributeList, error)
	// 获取商品常见疑问
	GetGoodsIssueList(context.Context, *GoodsDetailReq) (*GoodsIssueList, error)
	// 获取商品产品列表
	GetGoodsProductList(context.Context, *GoodsDetailReq) (*GoodsProductList, error)
}

// UnimplementedGoodsServer can be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (*UnimplementedGoodsServer) GetGoodsDetail(ctx context.Context, req *GoodsDetailReq) (*GoodsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsList(ctx context.Context, req *GoodsReq) (*GoodsListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (*UnimplementedGoodsServer) GetBrandDetail(ctx context.Context, req *BrandsDetailReq) (*BrandsDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandDetail not implemented")
}
func (*UnimplementedGoodsServer) GetBrandList(ctx context.Context, req *BrandsListReq) (*BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}
func (*UnimplementedGoodsServer) GetCategoryList(ctx context.Context, req *CategoryChildReq) (*CateGoryListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (*UnimplementedGoodsServer) GetCategory(ctx context.Context, req *CategoryReq) (*CategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsSize(ctx context.Context, req *GoodsDetailReq) (*GoodsSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsSize not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsGallery(ctx context.Context, req *GoodsDetailReq) (*GoodsGalleryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsGallery not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsAttribute(ctx context.Context, req *GoodsDetailReq) (*AttributeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsAttribute not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsIssueList(ctx context.Context, req *GoodsDetailReq) (*GoodsIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsIssueList not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsProductList(ctx context.Context, req *GoodsDetailReq) (*GoodsProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsProductList not implemented")
}

func RegisterGoodsServer(s *grpc.Server, srv GoodsServer) {
	s.RegisterService(&_Goods_serviceDesc, srv)
}

func _Goods_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsDetail(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsList(ctx, req.(*GoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetBrandDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBrandDetail(ctx, req.(*BrandsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBrandList(ctx, req.(*BrandsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryChildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetCategoryList(ctx, req.(*CategoryChildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetCategory(ctx, req.(*CategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsSize(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsGallery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsGallery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsGallery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsGallery(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsAttribute(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsIssueList(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsProductList(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Goods_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goods.service.v1.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsDetail",
			Handler:    _Goods_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetGoodsList",
			Handler:    _Goods_GetGoodsList_Handler,
		},
		{
			MethodName: "GetBrandDetail",
			Handler:    _Goods_GetBrandDetail_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _Goods_GetBrandList_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _Goods_GetCategoryList_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Goods_GetCategory_Handler,
		},
		{
			MethodName: "GetGoodsSize",
			Handler:    _Goods_GetGoodsSize_Handler,
		},
		{
			MethodName: "GetGoodsGallery",
			Handler:    _Goods_GetGoodsGallery_Handler,
		},
		{
			MethodName: "GetGoodsAttribute",
			Handler:    _Goods_GetGoodsAttribute_Handler,
		},
		{
			MethodName: "GetGoodsIssueList",
			Handler:    _Goods_GetGoodsIssueList_Handler,
		},
		{
			MethodName: "GetGoodsProductList",
			Handler:    _Goods_GetGoodsProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *CategoryChildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryChildReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryChildReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CategoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CategoryRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.WapBannerUrl) > 0 {
		i -= len(m.WapBannerUrl)
		copy(dAtA[i:], m.WapBannerUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.WapBannerUrl)))
		i--
		dAtA[i] = 0x32
	}
	if m.ParentId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FrontName) > 0 {
		i -= len(m.FrontName)
		copy(dAtA[i:], m.FrontName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FrontName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FrontDesc) > 0 {
		i -= len(m.FrontDesc)
		copy(dAtA[i:], m.FrontDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.FrontDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CateGoryListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CateGoryListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CateGoryListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CategoryList) > 0 {
		for iNdEx := len(m.CategoryList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CategoryList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GoodsDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CategoryId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CategoryId))
		i--
		dAtA[i] = 0x28
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.IsNew != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsNew))
		i--
		dAtA[i] = 0x10
	}
	if m.IsHot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsHot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GoodsList) > 0 {
		for iNdEx := len(m.GoodsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GoodsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BrandId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.BrandId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GoodsDesc) > 0 {
		i -= len(m.GoodsDesc)
		copy(dAtA[i:], m.GoodsDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsDesc)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ListPicUrl) > 0 {
		i -= len(m.ListPicUrl)
		copy(dAtA[i:], m.ListPicUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ListPicUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GoodsBrief) > 0 {
		i -= len(m.GoodsBrief)
		copy(dAtA[i:], m.GoodsBrief)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsBrief)))
		i--
		dAtA[i] = 0x22
	}
	if m.RetailPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RetailPrice))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BrandsDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandsDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandsDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BrandsDetailRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandsDetailRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandsDetailRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PicUrl) > 0 {
		i -= len(m.PicUrl)
		copy(dAtA[i:], m.PicUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PicUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SimpleDesc) > 0 {
		i -= len(m.SimpleDesc)
		copy(dAtA[i:], m.SimpleDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SimpleDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BrandListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BrandList) > 0 {
		for iNdEx := len(m.BrandList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BrandList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BrandsListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandsListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandsListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GoodsSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueList) > 0 {
		for iNdEx := len(m.ValueList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValueList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsSizeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsSizeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsSizeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GoodsSizeList) > 0 {
		for iNdEx := len(m.GoodsSizeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsSizeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GoodsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x32
	}
	if m.SpecificationId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.SpecificationId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PicUrl) > 0 {
		i -= len(m.PicUrl)
		copy(dAtA[i:], m.PicUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PicUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.GoodsId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsSellReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsSellReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsSellReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsGallery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsGallery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsGallery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ImgDesc) > 0 {
		i -= len(m.ImgDesc)
		copy(dAtA[i:], m.ImgDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgDesc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImgUrl) > 0 {
		i -= len(m.ImgUrl)
		copy(dAtA[i:], m.ImgUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImgUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GoodsId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsGalleryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsGalleryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsGalleryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GoodsGallery) > 0 {
		for iNdEx := len(m.GoodsGallery) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsGallery[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttributeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttributeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttributeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttributeList) > 0 {
		for iNdEx := len(m.AttributeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AttributeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GoodsIssue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Answer != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Answer))
		i--
		dAtA[i] = 0x20
	}
	if m.Question != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Question))
		i--
		dAtA[i] = 0x18
	}
	if m.GoodsId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsIssueList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsIssueList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsIssueList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GoodsIssue) > 0 {
		for iNdEx := len(m.GoodsIssue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsIssue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetailPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RetailPrice))))
		i--
		dAtA[i] = 0x29
	}
	if m.GoodsNumber != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GoodsSpecificationIds) > 0 {
		i -= len(m.GoodsSpecificationIds)
		copy(dAtA[i:], m.GoodsSpecificationIds)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsSpecificationIds)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GoodsId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.GoodsId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsProductList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsProductList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsProductList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for iNdEx := len(m.ProductList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProductList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CategoryChildReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	return n
}

func (m *CategoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *CategoryRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FrontDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FrontName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	l = len(m.WapBannerUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CateGoryListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CategoryList) > 0 {
		for _, e := range m.CategoryList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GoodsDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *GoodsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsHot != 0 {
		n += 1 + sovApi(uint64(m.IsHot))
	}
	if m.IsNew != 0 {
		n += 1 + sovApi(uint64(m.IsNew))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.CategoryId != 0 {
		n += 1 + sovApi(uint64(m.CategoryId))
	}
	return n
}

func (m *GoodsListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GoodsList) > 0 {
		for _, e := range m.GoodsList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	return n
}

func (m *GoodsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RetailPrice != 0 {
		n += 9
	}
	l = len(m.GoodsBrief)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ListPicUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GoodsDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BrandId != 0 {
		n += 1 + sovApi(uint64(m.BrandId))
	}
	return n
}

func (m *BrandsDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *BrandsDetailRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SimpleDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PicUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BrandListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BrandList) > 0 {
		for _, e := range m.BrandList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	return n
}

func (m *BrandsListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	return n
}

func (m *GoodsSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ValueList) > 0 {
		for _, e := range m.ValueList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GoodsSizeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GoodsSizeList) > 0 {
		for _, e := range m.GoodsSizeList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GoodsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GoodsId != 0 {
		n += 1 + sovApi(uint64(m.GoodsId))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PicUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SpecificationId != 0 {
		n += 1 + sovApi(uint64(m.SpecificationId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GoodsSellReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *GoodsGallery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.GoodsId != 0 {
		n += 1 + sovApi(uint64(m.GoodsId))
	}
	l = len(m.ImgUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImgDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GoodsGalleryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GoodsGallery) > 0 {
		for _, e := range m.GoodsGallery {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Attribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AttributeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AttributeList) > 0 {
		for _, e := range m.AttributeList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GoodsIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.GoodsId != 0 {
		n += 1 + sovApi(uint64(m.GoodsId))
	}
	if m.Question != 0 {
		n += 1 + sovApi(uint64(m.Question))
	}
	if m.Answer != 0 {
		n += 1 + sovApi(uint64(m.Answer))
	}
	return n
}

func (m *GoodsIssueList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GoodsIssue) > 0 {
		for _, e := range m.GoodsIssue {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.GoodsId != 0 {
		n += 1 + sovApi(uint64(m.GoodsId))
	}
	l = len(m.GoodsSpecificationIds)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GoodsNumber != 0 {
		n += 1 + sovApi(uint64(m.GoodsNumber))
	}
	if m.RetailPrice != 0 {
		n += 9
	}
	return n
}

func (m *GoodsProductList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductList) > 0 {
		for _, e := range m.ProductList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CategoryChildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryChildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryChildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WapBannerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WapBannerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CateGoryListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CateGoryListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CateGoryListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryList = append(m.CategoryList, &CategoryRes{})
			if err := m.CategoryList[len(m.CategoryList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			m.IsHot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			m.IsNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNew |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsList = append(m.GoodsList, &GoodsRes{})
			if err := m.GoodsList[len(m.GoodsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetailPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RetailPrice = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsBrief", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsBrief = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListPicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListPicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandId", wireType)
			}
			m.BrandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BrandId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandsDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandsDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandsDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandsDetailRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandsDetailRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandsDetailRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandList = append(m.BrandList, &BrandsDetailRes{})
			if err := m.BrandList[len(m.BrandList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandsListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandsListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandsListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueList = append(m.ValueList, &GoodsSpec{})
			if err := m.ValueList[len(m.ValueList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsSizeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsSizeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsSizeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsSizeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsSizeList = append(m.GoodsSizeList, &GoodsSize{})
			if err := m.GoodsSizeList[len(m.GoodsSizeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecificationId", wireType)
			}
			m.SpecificationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecificationId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsSellReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsSellReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsSellReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsGallery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsGallery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsGallery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsGalleryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsGalleryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsGalleryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsGallery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsGallery = append(m.GoodsGallery, &GoodsGallery{})
			if err := m.GoodsGallery[len(m.GoodsGallery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeList = append(m.AttributeList, &Attribute{})
			if err := m.AttributeList[len(m.AttributeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsIssue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsIssue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsIssue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			m.Question = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Question |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			m.Answer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Answer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsIssueList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsIssueList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsIssueList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsIssue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsIssue = append(m.GoodsIssue, &GoodsIssue{})
			if err := m.GoodsIssue[len(m.GoodsIssue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsSpecificationIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsSpecificationIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsNumber", wireType)
			}
			m.GoodsNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetailPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RetailPrice = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsProductList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsProductList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsProductList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductList = append(m.ProductList, &Product{})
			if err := m.ProductList[len(m.ProductList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)

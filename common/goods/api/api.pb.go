// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 商品详情Req
type GoodsDetailReq struct {
	// 商品id
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsDetailReq) Reset()         { *m = GoodsDetailReq{} }
func (m *GoodsDetailReq) String() string { return proto.CompactTextString(m) }
func (*GoodsDetailReq) ProtoMessage()    {}
func (*GoodsDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *GoodsDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsDetailReq.Merge(m, src)
}
func (m *GoodsDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *GoodsDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsDetailReq proto.InternalMessageInfo

// 商品列表Req
type GoodsReq struct {
	// 是否是热销 1:是、0:否
	IsHot int32 `protobuf:"varint,1,opt,name=isHot,proto3" json:"isHot,omitempty" form:"isHot"`
	// 页数
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 每页数量
	Size_                int32    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" form:"size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsReq) Reset()         { *m = GoodsReq{} }
func (m *GoodsReq) String() string { return proto.CompactTextString(m) }
func (*GoodsReq) ProtoMessage()    {}
func (*GoodsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *GoodsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsReq.Merge(m, src)
}
func (m *GoodsReq) XXX_Size() int {
	return m.Size()
}
func (m *GoodsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsReq proto.InternalMessageInfo

// 商品列表Res
type GoodsListRes struct {
	// 商品列表
	GoodsList []*GoodsRes `protobuf:"bytes,1,rep,name=goodsList,proto3" json:"goodsList,omitempty" form:"goodsList"`
	// 商品总数
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty" form:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsListRes) Reset()         { *m = GoodsListRes{} }
func (m *GoodsListRes) String() string { return proto.CompactTextString(m) }
func (*GoodsListRes) ProtoMessage()    {}
func (*GoodsListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *GoodsListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsListRes.Merge(m, src)
}
func (m *GoodsListRes) XXX_Size() int {
	return m.Size()
}
func (m *GoodsListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsListRes.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsListRes proto.InternalMessageInfo

// 商品详情Res
type GoodsRes struct {
	// 商品id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 商品名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 零食价格
	RetailPrice float64 `protobuf:"fixed64,3,opt,name=retail_price,json=retailPrice,proto3" json:"retail_price,omitempty"`
	// 商品简介
	GoodsBrief string `protobuf:"bytes,4,opt,name=goods_brief,json=goodsBrief,proto3" json:"goods_brief,omitempty"`
	// 商品图片
	ListPicUrl           string   `protobuf:"bytes,5,opt,name=list_pic_url,json=listPicUrl,proto3" json:"list_pic_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GoodsRes) Reset()         { *m = GoodsRes{} }
func (m *GoodsRes) String() string { return proto.CompactTextString(m) }
func (*GoodsRes) ProtoMessage()    {}
func (*GoodsRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *GoodsRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoodsRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoodsRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoodsRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoodsRes.Merge(m, src)
}
func (m *GoodsRes) XXX_Size() int {
	return m.Size()
}
func (m *GoodsRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GoodsRes.DiscardUnknown(m)
}

var xxx_messageInfo_GoodsRes proto.InternalMessageInfo

// 制造商详情Req
type BrandsDetailReq struct {
	// 制造商id
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandsDetailReq) Reset()         { *m = BrandsDetailReq{} }
func (m *BrandsDetailReq) String() string { return proto.CompactTextString(m) }
func (*BrandsDetailReq) ProtoMessage()    {}
func (*BrandsDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *BrandsDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandsDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandsDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandsDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandsDetailReq.Merge(m, src)
}
func (m *BrandsDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *BrandsDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandsDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_BrandsDetailReq proto.InternalMessageInfo

// 制造商详情Res
type BrandsDetailRes struct {
	// 制造商id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 制造商名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 制造商简介
	SimpleDesc string `protobuf:"bytes,3,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc,omitempty"`
	// 制造商图片
	PicUrl               string   `protobuf:"bytes,4,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandsDetailRes) Reset()         { *m = BrandsDetailRes{} }
func (m *BrandsDetailRes) String() string { return proto.CompactTextString(m) }
func (*BrandsDetailRes) ProtoMessage()    {}
func (*BrandsDetailRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *BrandsDetailRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandsDetailRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandsDetailRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandsDetailRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandsDetailRes.Merge(m, src)
}
func (m *BrandsDetailRes) XXX_Size() int {
	return m.Size()
}
func (m *BrandsDetailRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandsDetailRes.DiscardUnknown(m)
}

var xxx_messageInfo_BrandsDetailRes proto.InternalMessageInfo

// 制造商列表Res
type BrandListRes struct {
	// 商品列表
	BrandList []*BrandsDetailRes `protobuf:"bytes,1,rep,name=brandList,proto3" json:"brandList,omitempty" form:"brandList"`
	// 商品总数
	Total                int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty" form:"total"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandListRes) Reset()         { *m = BrandListRes{} }
func (m *BrandListRes) String() string { return proto.CompactTextString(m) }
func (*BrandListRes) ProtoMessage()    {}
func (*BrandListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *BrandListRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandListRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandListRes.Merge(m, src)
}
func (m *BrandListRes) XXX_Size() int {
	return m.Size()
}
func (m *BrandListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandListRes.DiscardUnknown(m)
}

var xxx_messageInfo_BrandListRes proto.InternalMessageInfo

// 制造商列表Req
type BrandsListReq struct {
	// 页数
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 每页数量
	Size_                int32    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty" form:"size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrandsListReq) Reset()         { *m = BrandsListReq{} }
func (m *BrandsListReq) String() string { return proto.CompactTextString(m) }
func (*BrandsListReq) ProtoMessage()    {}
func (*BrandsListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *BrandsListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BrandsListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BrandsListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BrandsListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrandsListReq.Merge(m, src)
}
func (m *BrandsListReq) XXX_Size() int {
	return m.Size()
}
func (m *BrandsListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BrandsListReq.DiscardUnknown(m)
}

var xxx_messageInfo_BrandsListReq proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GoodsDetailReq)(nil), "goods.service.v1.GoodsDetailReq")
	proto.RegisterType((*GoodsReq)(nil), "goods.service.v1.GoodsReq")
	proto.RegisterType((*GoodsListRes)(nil), "goods.service.v1.GoodsListRes")
	proto.RegisterType((*GoodsRes)(nil), "goods.service.v1.GoodsRes")
	proto.RegisterType((*BrandsDetailReq)(nil), "goods.service.v1.BrandsDetailReq")
	proto.RegisterType((*BrandsDetailRes)(nil), "goods.service.v1.BrandsDetailRes")
	proto.RegisterType((*BrandListRes)(nil), "goods.service.v1.BrandListRes")
	proto.RegisterType((*BrandsListReq)(nil), "goods.service.v1.BrandsListReq")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x93, 0xa6, 0xdf, 0xe7, 0x89, 0xfb, 0xa3, 0x81, 0xaa, 0xc6, 0xa5, 0x76, 0x3a, 0x48,
	0xa8, 0x1b, 0x6c, 0x28, 0x3b, 0x96, 0x51, 0xa5, 0xb2, 0x40, 0xa8, 0x1a, 0xa9, 0x0b, 0xd8, 0x44,
	0x8e, 0x33, 0x35, 0x23, 0xd9, 0x19, 0xc7, 0x33, 0xa9, 0x04, 0x62, 0xc5, 0x82, 0x1d, 0x2b, 0x58,
	0xf0, 0x40, 0x2c, 0xba, 0x44, 0x62, 0x1f, 0x41, 0xe1, 0x09, 0xf2, 0x04, 0xc8, 0x77, 0x1c, 0x27,
	0x84, 0x84, 0x16, 0x89, 0x9d, 0xe7, 0xdc, 0x73, 0x7f, 0xce, 0x3d, 0x37, 0x41, 0x66, 0x98, 0x71,
	0x3f, 0xcb, 0x85, 0x12, 0x78, 0x2b, 0x16, 0xa2, 0x27, 0x7d, 0xc9, 0xf2, 0x73, 0x1e, 0x31, 0xff,
	0xfc, 0x81, 0x73, 0x2f, 0xe6, 0xea, 0xc5, 0xb0, 0xeb, 0x47, 0x22, 0x0d, 0x62, 0x11, 0x8b, 0x00,
	0x88, 0xdd, 0xe1, 0x19, 0xbc, 0xe0, 0x01, 0x5f, 0xba, 0x80, 0xb3, 0x1b, 0x0b, 0x11, 0x27, 0x6c,
	0xca, 0x62, 0x69, 0xa6, 0x5e, 0x96, 0xc1, 0xdb, 0x65, 0x30, 0xcc, 0x78, 0x10, 0xf6, 0xfb, 0x42,
	0x85, 0x8a, 0x8b, 0xbe, 0xd4, 0x51, 0x12, 0xa0, 0x8d, 0xe3, 0xa2, 0xfb, 0x11, 0x53, 0x21, 0x4f,
	0x28, 0x1b, 0xe0, 0x3d, 0x54, 0xe3, 0x3d, 0xdb, 0x68, 0x19, 0x07, 0x8d, 0xf6, 0xfa, 0x78, 0xe4,
	0x99, 0x67, 0x22, 0x4f, 0x1f, 0x11, 0xde, 0x23, 0xb4, 0xc6, 0x7b, 0xe4, 0x35, 0xfa, 0x1f, 0x12,
	0x0a, 0xea, 0x5d, 0xd4, 0xe0, 0xf2, 0xb1, 0x50, 0x25, 0x7b, 0x6b, 0x3c, 0xf2, 0xac, 0x92, 0x5d,
	0xc0, 0x84, 0xea, 0x30, 0xbe, 0x83, 0x56, 0xb3, 0x30, 0x66, 0x76, 0x0d, 0x68, 0x9b, 0xe3, 0x91,
	0xd7, 0xd4, 0xb4, 0x02, 0x25, 0x14, 0x82, 0x05, 0x49, 0xf2, 0x57, 0xcc, 0xae, 0xcf, 0x93, 0x0a,
	0x94, 0x50, 0x08, 0x92, 0xb7, 0x06, 0xb2, 0xa0, 0xfd, 0x13, 0x2e, 0x15, 0x65, 0x12, 0x3f, 0x45,
	0x66, 0x3c, 0x79, 0xdb, 0x46, 0xab, 0x7e, 0xd0, 0x3c, 0x74, 0xfc, 0xf9, 0x7d, 0xfa, 0xe5, 0xc4,
	0xb2, 0x7d, 0x73, 0x3c, 0xf2, 0xb6, 0x74, 0xd9, 0x2a, 0x8d, 0xd0, 0x69, 0x89, 0x42, 0x92, 0x12,
	0x2a, 0x4c, 0xca, 0x59, 0x67, 0x24, 0x01, 0x4c, 0xa8, 0x0e, 0x93, 0x0f, 0x46, 0xb5, 0x07, 0x89,
	0x37, 0xa6, 0x2b, 0x2b, 0x76, 0x84, 0x31, 0x5a, 0xed, 0x87, 0xa9, 0xd6, 0x6b, 0x52, 0xf8, 0xc6,
	0xfb, 0xc8, 0xca, 0x61, 0xc7, 0x9d, 0x2c, 0xe7, 0x91, 0x96, 0x69, 0xd0, 0xa6, 0xc6, 0x4e, 0x0a,
	0x08, 0x7b, 0xa8, 0x09, 0x83, 0x74, 0xba, 0x39, 0x67, 0x67, 0xf6, 0x2a, 0x64, 0x23, 0x80, 0xda,
	0x05, 0x82, 0x5b, 0xc8, 0x4a, 0xb8, 0x54, 0x9d, 0x8c, 0x47, 0x9d, 0x61, 0x9e, 0xd8, 0x0d, 0xcd,
	0x28, 0xb0, 0x13, 0x1e, 0x9d, 0xe6, 0x09, 0xb9, 0x8f, 0x36, 0xdb, 0x79, 0xd8, 0xff, 0x0b, 0x3f,
	0xc5, 0x7c, 0xc6, 0xf5, 0xe4, 0x78, 0xa8, 0x29, 0x79, 0x9a, 0x25, 0xac, 0xd3, 0x63, 0x32, 0x02,
	0x35, 0x26, 0x45, 0x1a, 0x3a, 0x62, 0x32, 0xc2, 0x3b, 0xe8, 0xbf, 0xc9, 0x98, 0x5a, 0xc8, 0x5a,
	0xa6, 0x47, 0x7c, 0x67, 0x20, 0x0b, 0x3a, 0x4e, 0x2c, 0x3c, 0x45, 0x66, 0x77, 0xf2, 0x2e, 0x2d,
	0xdc, 0xff, 0xdd, 0xc2, 0xb9, 0x21, 0x67, 0x9d, 0xac, 0xb2, 0x09, 0x9d, 0x56, 0xba, 0xb6, 0x93,
	0xcf, 0xd0, 0xba, 0xae, 0xad, 0xe7, 0x19, 0xfc, 0xbb, 0x6b, 0x3d, 0xfc, 0x54, 0x47, 0x0d, 0x38,
	0x12, 0x9c, 0xa2, 0x8d, 0x63, 0xa6, 0x66, 0x7e, 0x69, 0xb8, 0xb5, 0xe4, 0x4a, 0x2b, 0xe3, 0x9c,
	0x3f, 0xdc, 0x31, 0xd9, 0x7b, 0xf3, 0xe5, 0xc7, 0xfb, 0xda, 0x0e, 0xde, 0x0e, 0x80, 0x13, 0xc4,
	0xbf, 0x16, 0x8f, 0x91, 0x35, 0x69, 0x07, 0xbb, 0x58, 0x5e, 0x6a, 0xe0, 0xb8, 0x4b, 0x62, 0xa5,
	0x3d, 0x64, 0x17, 0x5a, 0x6d, 0xe3, 0x1b, 0x73, 0xad, 0xa0, 0xf0, 0x10, 0x74, 0xc1, 0xfe, 0xca,
	0xd6, 0x57, 0x5a, 0x37, 0x70, 0xae, 0x76, 0x77, 0x91, 0xbe, 0xd9, 0x26, 0x09, 0xe8, 0xab, 0xae,
	0x08, 0x7b, 0xcb, 0x2a, 0x96, 0x9e, 0x2e, 0x12, 0x39, 0x7b, 0x83, 0x8b, 0x44, 0x56, 0xf1, 0xf6,
	0xad, 0x8b, 0x6f, 0xee, 0xca, 0xc5, 0xa5, 0x6b, 0x7c, 0xbe, 0x74, 0x8d, 0xaf, 0x97, 0xae, 0xf1,
	0xf1, 0xbb, 0xbb, 0xf2, 0xbc, 0x1e, 0x66, 0xbc, 0xbb, 0x06, 0xff, 0xa2, 0x0f, 0x7f, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x42, 0x27, 0xec, 0xe6, 0xce, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoodsClient interface {
	// 获取商品详情
	GetGoodsDetail(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsRes, error)
	// 获取商品列表
	GetGoodsList(ctx context.Context, in *GoodsReq, opts ...grpc.CallOption) (*GoodsListRes, error)
	// 获取制造商详情
	GetBrandDetail(ctx context.Context, in *BrandsDetailReq, opts ...grpc.CallOption) (*BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(ctx context.Context, in *BrandsListReq, opts ...grpc.CallOption) (*BrandListRes, error)
}

type goodsClient struct {
	cc *grpc.ClientConn
}

func NewGoodsClient(cc *grpc.ClientConn) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) GetGoodsDetail(ctx context.Context, in *GoodsDetailReq, opts ...grpc.CallOption) (*GoodsRes, error) {
	out := new(GoodsRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsList(ctx context.Context, in *GoodsReq, opts ...grpc.CallOption) (*GoodsListRes, error) {
	out := new(GoodsListRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetGoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBrandDetail(ctx context.Context, in *BrandsDetailReq, opts ...grpc.CallOption) (*BrandsDetailRes, error) {
	out := new(BrandsDetailRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetBrandDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetBrandList(ctx context.Context, in *BrandsListReq, opts ...grpc.CallOption) (*BrandListRes, error) {
	out := new(BrandListRes)
	err := c.cc.Invoke(ctx, "/goods.service.v1.Goods/GetBrandList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
type GoodsServer interface {
	// 获取商品详情
	GetGoodsDetail(context.Context, *GoodsDetailReq) (*GoodsRes, error)
	// 获取商品列表
	GetGoodsList(context.Context, *GoodsReq) (*GoodsListRes, error)
	// 获取制造商详情
	GetBrandDetail(context.Context, *BrandsDetailReq) (*BrandsDetailRes, error)
	// 获取制造商列表
	GetBrandList(context.Context, *BrandsListReq) (*BrandListRes, error)
}

// UnimplementedGoodsServer can be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (*UnimplementedGoodsServer) GetGoodsDetail(ctx context.Context, req *GoodsDetailReq) (*GoodsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (*UnimplementedGoodsServer) GetGoodsList(ctx context.Context, req *GoodsReq) (*GoodsListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsList not implemented")
}
func (*UnimplementedGoodsServer) GetBrandDetail(ctx context.Context, req *BrandsDetailReq) (*BrandsDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandDetail not implemented")
}
func (*UnimplementedGoodsServer) GetBrandList(ctx context.Context, req *BrandsListReq) (*BrandListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrandList not implemented")
}

func RegisterGoodsServer(s *grpc.Server, srv GoodsServer) {
	s.RegisterService(&_Goods_serviceDesc, srv)
}

func _Goods_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsDetail(ctx, req.(*GoodsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetGoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsList(ctx, req.(*GoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBrandDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandsDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBrandDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetBrandDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBrandDetail(ctx, req.(*BrandsDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetBrandList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrandsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetBrandList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.service.v1.Goods/GetBrandList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetBrandList(ctx, req.(*BrandsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Goods_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goods.service.v1.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodsDetail",
			Handler:    _Goods_GetGoodsDetail_Handler,
		},
		{
			MethodName: "GetGoodsList",
			Handler:    _Goods_GetGoodsList_Handler,
		},
		{
			MethodName: "GetBrandDetail",
			Handler:    _Goods_GetBrandDetail_Handler,
		},
		{
			MethodName: "GetBrandList",
			Handler:    _Goods_GetBrandList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *GoodsDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.IsHot != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsHot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GoodsListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GoodsList) > 0 {
		for iNdEx := len(m.GoodsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GoodsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GoodsRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoodsRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ListPicUrl) > 0 {
		i -= len(m.ListPicUrl)
		copy(dAtA[i:], m.ListPicUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ListPicUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GoodsBrief) > 0 {
		i -= len(m.GoodsBrief)
		copy(dAtA[i:], m.GoodsBrief)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GoodsBrief)))
		i--
		dAtA[i] = 0x22
	}
	if m.RetailPrice != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RetailPrice))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BrandsDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandsDetailReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandsDetailReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BrandsDetailRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandsDetailRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandsDetailRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PicUrl) > 0 {
		i -= len(m.PicUrl)
		copy(dAtA[i:], m.PicUrl)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PicUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SimpleDesc) > 0 {
		i -= len(m.SimpleDesc)
		copy(dAtA[i:], m.SimpleDesc)
		i = encodeVarintApi(dAtA, i, uint64(len(m.SimpleDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BrandListRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandListRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandListRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BrandList) > 0 {
		for iNdEx := len(m.BrandList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BrandList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BrandsListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrandsListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BrandsListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoodsDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsHot != 0 {
		n += 1 + sovApi(uint64(m.IsHot))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GoodsList) > 0 {
		for _, e := range m.GoodsList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GoodsRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RetailPrice != 0 {
		n += 9
	}
	l = len(m.GoodsBrief)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ListPicUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandsDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandsDetailRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SimpleDesc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PicUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandListRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BrandList) > 0 {
		for _, e := range m.BrandList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BrandsListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovApi(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GoodsDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			m.IsHot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHot |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsList = append(m.GoodsList, &GoodsRes{})
			if err := m.GoodsList[len(m.GoodsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetailPrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RetailPrice = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsBrief", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsBrief = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListPicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListPicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandsDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandsDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandsDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandsDetailRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandsDetailRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandsDetailRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SimpleDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandListRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandListRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandListRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandList = append(m.BrandList, &BrandsDetailRes{})
			if err := m.BrandList[len(m.BrandList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrandsListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrandsListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrandsListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
